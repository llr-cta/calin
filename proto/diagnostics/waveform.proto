/*

   calin/proto/diagnostics/waveform.proto -- Stephen Fegan -- 2015-12-19

   Protobufs for waveform diagnostics

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "math/histogram.proto";
//import "common_types.proto";

package calin.ix.diagnostics.waveform;

message WaveformRawStats {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  repeated uint64 sum                                      = 11 [
    (CFO).desc = "Sum over all events of each waveform sample." ];
  repeated uint64 sum_squared                              = 12 [
    (CFO).desc = "Sum over all events of each waveform sample squared." ];
  repeated uint64 sum_product                              = 13 [
    (CFO).desc = "Sum over all events of each waveform sample by all others. "
      "This corresponds to the off-diagnonal elements of the covariance "
      "matrix." ];
};

message CameraWaveformRawStats {
  repeated uint32 channel_id                               = 1 [
    (CFO).desc = "Channel id." ];
  repeated WaveformRawStats high_gain                      = 11 [
    (CFO).desc = "Raw waveform stats for all high gain channels." ];
  repeated WaveformRawStats low_gain                       = 12 [
    (CFO).desc = "Raw waveform stats for all low gain channels." ];
};

message PartialWaveformRawStats {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  repeated uint32 sum                                      = 11 [
    (CFO).desc = "Sum over all events of each waveform sample." ];
  repeated uint32 sum_squared                              = 12 [
    (CFO).desc = "Sum over all events of each waveform sample squared." ];
  repeated uint32 sum_product                              = 13 [
    (CFO).desc = "Sum over all events of each waveform sample by all others. "
      "This corresponds to the off-diagnonal elements of the covariance "
      "matrix." ];
};

message PartialCameraWaveformRawStats {
  repeated PartialWaveformRawStats high_gain               = 1 [
    (CFO).desc = "Raw waveform stats for all high gain channels." ];
  repeated PartialWaveformRawStats low_gain                = 2 [
    (CFO).desc = "Raw waveform stats for all low gain channels." ];
};

message WaveformRawPSD {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  repeated double psd_sum                                  = 2 [
    (CFO).desc = "Sum of PSDs for all events." ];
  repeated double psd_sum_squared                          = 3 [
    (CFO).desc = "Sum of squared PSD for all events." ];
  repeated double corr_sum                                 = 4 [
    (CFO).desc = "Sum of auto correlations for all events." ];
  repeated double corr_sum_squared                         = 5 [
    (CFO).desc = "Sum of squared auto correlations for all events." ];
};

message CameraWaveformRawPSD {
  repeated uint32 channel_id                               = 1 [
    (CFO).desc = "Channel id." ];
  repeated WaveformRawPSD high_gain                        = 11 [
    (CFO).desc = "Raw PSD for all high gain channels." ];
  repeated WaveformRawPSD low_gain                         = 12 [
    (CFO).desc = "Raw PSD for all low gain channels." ];
};

message OneGainIntFunctionalWaveformRawStats {
  repeated uint32 num_sum_entries                          = 1 [
    (CFO).desc = "Number of waveforms accumulated in the sum and sum_squared "
      "stats." ];
  repeated uint32 num_sum_product_entries                  = 2 [
    (CFO).desc = "Number of waveforms accumulated in the sum_product stats." ];
  repeated int64 sum                                      = 11 [
    (CFO).desc = "Sum over all events of integrated sample for each channel." ];
  repeated int64 sum_squared                              = 12 [
    (CFO).desc = "Sum over all events of integrated sample for each channel "
      "squared." ];
  repeated int64 sum_product                              = 13 [
    (CFO).desc = "Sum over all events of integrated sample for each channel "
      "by all others. This corresponds to the off-diagnonal elements of the "
      "covariance matrix." ];
  repeated math.histogram.Histogram1DData integrated_hist  = 21 [
    (CFO).desc = "Histogram of integrated signal for each channel." ];
};

message CameraIntFunctionalWaveformRawStats {
  repeated uint32 channel_id                               = 1 [
    (CFO).desc = "Channel id." ];
  OneGainIntFunctionalWaveformRawStats high_gain              = 11 [
    (CFO).desc = "Integrated stats for high gain channels." ];
  OneGainIntFunctionalWaveformRawStats low_gain               = 12 [
    (CFO).desc = "Integrated stats for low gain channels." ];
};

message WaveformMean {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  double sampling_period                                   = 2 [
    (CFO).desc = "Time between each sample of waveform.", (CFO).units = "ns" ];
  repeated double waveform_mean                            = 3 [
    (CFO).desc = "Mean waveform." ];
  repeated double waveform_rms                             = 4 [
    (CFO).desc = "RMS of waveform." ];
};

message WaveformPSD {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  double sampling_frequency                                = 2 [
    (CFO).desc = "Sampling frequency.", (CFO).units = "GHz" ];
  repeated double psd_mean                                 = 3 [
    (CFO).desc = "Mean waveform." ];
  repeated double psd_rms                                  = 4 [
    (CFO).desc = "RMS of waveform." ];
};

message WaveformDiagnostics {
  WaveformMean mean                                        = 1 [
    (CFO).desc = "Mean and RMS of waveform." ];
  WaveformPSD psd                                          = 2 [
    (CFO).desc = "Mean and RMS of waveform PSD." ];
  math.histogram.Histogram1DData mean_pulse_time           = 3 [
    (CFO).desc = "Mean pulse time from start of waveform." ];
  math.histogram.Histogram1DData rms_pulse_time            = 4 [
    (CFO).desc = "RMS pulse time." ];
};

message FunctionalWaveformStatsVisitorConfig {
  bool calculate_covariance                                = 1 [
    (CFO).desc = "Calculate channel-to-channel covariance matrix." ];
};
