/*

   calin/proto/diagnostics/waveform.proto -- Stephen Fegan -- 2015-12-19

   Protobufs for waveform diagnostics

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "math/histogram.proto";
//import "common_types.proto";

package calin.ix.diagnostics.waveform;

message WaveformRawStats {
  uint32 channel_id                                        = 1 [
    (CFO).desc = "Channel id." ];
  uint32 num_entries                                       = 2 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  repeated int64 sum                                       = 11 [
    (CFO).desc = "Sum over all events of each waveform sample." ];
  repeated int64 sum_squared                               = 12 [
    (CFO).desc = "Sum over all events of each waveform sample squared." ];
  repeated int64 sum_product                               = 13 [
    (CFO).desc = "Sum over all events of each waveform sample by all others. "
      "This corresponds to the off-diagnonal elements of the covariance "
      "matrix." ];
};

message CameraWaveformRawStats {
  repeated WaveformRawStats high_gain                      = 1 [
    (CFO).desc = "Raw waveform stats for all high gain channels." ];
  repeated WaveformRawStats low_gain                       = 2 [
    (CFO).desc = "Raw waveform stats for all low gain channels." ];
};

message WaveformMean {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  double sampling_period                                   = 2 [
    (CFO).desc = "Time between each sample of waveform.", (CFO).units = "ns" ];
  repeated double waveform_mean                            = 3 [
    (CFO).desc = "Mean waveform." ];
  repeated double waveform_rms                             = 4 [
    (CFO).desc = "RMS of waveform." ];
};

message WaveformPSD {
  uint32 num_entries                                       = 1 [
    (CFO).desc = "Number of waveforms accumulated in the stats." ];
  double sampling_frequency                                = 2 [
    (CFO).desc = "Sampling frequency.", (CFO).units = "GHz" ];
  repeated double psd_mean                                 = 3 [
    (CFO).desc = "Mean waveform." ];
  repeated double psd_rms                                  = 4 [
    (CFO).desc = "RMS of waveform." ];
};

message WaveformDiagnostics {
  WaveformMean mean                                        = 1 [
    (CFO).desc = "Mean and RMS of waveform." ];
  WaveformPSD psd                                          = 2 [
    (CFO).desc = "Mean and RMS of waveform PSD." ];
  math.histogram.Histogram1DData mean_pulse_time           = 3 [
    (CFO).desc = "Mean pulse time from start of waveform." ];
  math.histogram.Histogram1DData rms_pulse_time            = 4 [
    (CFO).desc = "RMS pulse time." ];
};
