/*

   calin/proto/diagnostics/run_info.proto -- Stephen Fegan -- 2018-10-26

   Protobufs for run informaton diagnostics

   Copyright 2018, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";
import "math/histogram.proto";
import "diagnostics/range.proto";
//import "common_types.proto";

package calin.ix.diagnostics.run_info;


enum CounterValueTestMode {
  VALUE                                                    = 0;
  VALUE_RELATIVE_TO_MEDIAN                                 = 1;
  VALUE_RELATIVE_TO_EVENT_NUMBER                           = 2;
};

message CameraRunInfoConfig {
  repeated int32 module_counter_test_id                    = 1;
  repeated CounterValueTestMode module_counter_test_mode   = 2;
};

message RunInfoConfig {
  repeated int32 module_counter_test_id                    = 1;
  repeated CounterValueTestMode module_counter_test_mode   = 2;
  bool enable_module_counter_test_value_range              = 3 [
    (CFO).desc = "Enable the value range for the module counter tests. Warning "
      "this may lead to very large output file sizes if the counter test value "
      "changes quickly during the run. Default is false, where only a histogram "
      "of the summed square value vs event number is written." ];

  double event_number_histogram_resolution                 = 10 [
    (CFO).desc = "Resolution of event number histogram.", (CFO).units="events" ];
  double event_time_histogram_resolution                   = 11 [
    (CFO).desc = "Resolution of event time histograms.", (CFO).units="s" ];
  double log10_delta_t_histogram_binsize                   = 12 [
    (CFO).desc = "Resolution of log10(delta-T) histograms." ];
  double delta_t_timeslice                                 = 13 [
    (CFO).desc = "Resolution of time-dependent delta-T histogram time slices.",
    (CFO).units="s" ];
  CameraRunInfoConfig default_nectarcam_config             = 100;
  CameraRunInfoConfig default_lstcam_config                = 101;
};

message CounterValues {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  uint32 counter_id                                        = 1 [
    (CFO).desc = "Counter ID within module." ];
  string counter_name                                      = 2 [
    (CFO).desc = "Counter name within module." ];
  CounterValueTestMode test_mode                           = 3 [
    (CFO).desc = "Counter value processing mode." ];
  calin.ix.diagnostics.range.IndexAndValueRangeInt64 value_range = 4 [
    (CFO).desc = "Counter value and index range." ];
  calin.ix.math.histogram.Histogram1DData value_squared_sum_histogram = 5 [
    (CFO).desc = "Histogram of the sum of the squared value vs event number." ];
};

message ModuleRunInfo {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  uint32 configured_module_rank                            = 1 [
    (CFO).desc = "Rank of module within configured modules for this run." ];
  uint32 camera_module_id                                  = 2 [
    (CFO).desc = "Module ID within camera." ];
  uint64 num_events_present                                = 3 [
    (CFO).desc = "Number of events for which data from this module was "
      "present.",
    (CFO).is_counter = true ];
  calin.ix.diagnostics.range.IndexRange events_missing     = 4 [
    (CFO).desc = "Ranges of event numbers for data from this module was "
      "missing." ];
  repeated CounterValues counter_value                     = 10 [
    (CFO).desc = "Ranges of event numbers for which the modules had consistent "
      "values." ];
};

message RunInfo {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  uint64 num_events_found                                  = 1 [
    (CFO).desc = "Number of events found.",
    (CFO).is_counter = true ];
  calin.ix.diagnostics.range.IndexRange event_numbers_found = 2 [
    (CFO).desc = "Range of event numbers found." ];
  calin.ix.math.histogram.Histogram1DData event_number_histogram = 3 [
    (CFO).desc = "Histogram of event numbers found." ];

  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram = 10 [
    (CFO).desc = "Histogram of elapsed time." ];

  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_physics = 11 [
    (CFO).desc = "Histogram of elapsed time for physics triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_software = 12 [
    (CFO).desc = "Histogram of elapsed time for software triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_pedestal = 13 [
    (CFO).desc = "Histogram of elapsed time for pedestal triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_external_flasher = 14 [
    (CFO).desc = "Histogram of elapsed time for external flasher triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_internal_flasher = 15 [
    (CFO).desc = "Histogram of elapsed time for internal flasher triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_forced_array = 16 [
    (CFO).desc = "Histogram of elapsed time for forced array triggers." ];
  calin.ix.math.histogram.Histogram1DData elapsed_time_histogram_trigger_ucts_aux = 17 [
    (CFO).desc = "Histogram of elapsed time for UCTS triggers." ];

  uint64 num_events_missing_cdts                           = 20 [
    (CFO).desc = "Number of events without CDTS information.",
    (CFO).is_counter = true ];
  uint64 num_events_missing_tib                            = 21 [
    (CFO).desc = "Number of events without TIB information.",
    (CFO).is_counter = true ];
  uint64 num_events_missing_swat                           = 22 [
    (CFO).desc = "Number of events without SWAT information.",
    (CFO).is_counter = true ];
  uint64 num_events_missing_modules                        = 23 [
    (CFO).desc = "Number of events without all channel information.",
    (CFO).is_counter = true ];
  uint64 num_duplicate_event_numbers                       = 24 [
    (CFO).desc = "Number of duplicated event numbers found.",
    (CFO).is_counter = true ];
  uint64 num_events_missing_tib_and_cdts                   = 25 [
    (CFO).desc = "Number of events without TIB and CDTS information.",
    (CFO).is_counter = true ];

  calin.ix.diagnostics.range.IndexRange events_missing_cdts    = 30 [
    (CFO).desc = "List of event ranges without UCTS information." ];
  calin.ix.diagnostics.range.IndexRange events_missing_tib     = 31 [
    (CFO).desc = "List of event ranges without TIB information." ];
  calin.ix.diagnostics.range.IndexRange events_missing_swat    = 32 [
    (CFO).desc = "List of event ranges without SWAT information." ];
  calin.ix.diagnostics.range.IndexRange events_missing_modules = 33 [
    (CFO).desc = "List of event ranges without without all channel information." ];
  calin.ix.diagnostics.range.RunLengthEncodingUInt64 duplicate_event_numbers = 34 [
    (CFO).desc = "List of duplicate event numbers (value) and the number "
      "of EXTRA times they appear (count)." ];

  uint64 num_mono_trigger                                  = 40 [
    (CFO).desc = "Number of events with mono trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_stereo_trigger                                = 41 [
    (CFO).desc = "Number of events with stereo trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_external_calibration_trigger                  = 42 [
    (CFO).desc = "Number of events with external calibration trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_internal_calibration_trigger                  = 43 [
    (CFO).desc = "Number of events with internal calibration trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_ucts_aux_trigger                              = 44 [
    (CFO).desc = "Number of events with UCTS aux trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_pedestal_trigger                              = 45 [
    (CFO).desc = "Number of events with pedestal trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_slow_control_trigger                          = 46 [
    (CFO).desc = "Number of events with slow control trigger TIB bit set.",
    (CFO).is_counter = true ];
  uint64 num_busy_trigger                                  = 47 [
    (CFO).desc = "Number of events with busy trigger trigger TIB bit set.",
    (CFO).is_counter = true ];

  calin.ix.math.histogram.Histogram1DData trigger_code_histogram = 48 [
    (CFO).desc = "Histogram of TIB (or UCTS if unavailable) trigger code" ];
  calin.ix.math.histogram.Histogram1DData tib_ucts_trigger_code_diff_histogram = 49 [
    (CFO).desc = "Histogram of TIB trigger code minus UCTS trigger code, for "
      "events where both are available."];
  uint64 num_tib_ucts_trigger_code_mismatch                = 50 [
    (CFO).desc = "Number of events where TIB and UCTS triiger codes do not match.",
    (CFO).is_counter = true ];

  int64 min_event_time                                     = 60 [
    (CFO).desc = "Minimum absolute event time from all events.",
    (CFO).units = "ns",
    (CFO).integration_algorithm = MIN ];
  int64 max_event_time                                     = 61 [
    (CFO).desc = "Maximum absolute event time from all events.",
    (CFO).units = "ns",
    (CFO).integration_algorithm = MAX ];
  repeated int64 camera_clock_presence                     = 62 [
    (CFO).desc = "Number of events for which each camera clock is available.",
    (CFO).units = "evenst",
    (CFO).integration_algorithm = SUM, (CFO).is_counter = true ];
  repeated int64 camera_clock_min_time                     = 63 [
    (CFO).desc = "Minimum event time for each of the camera clocks.",
    (CFO).units = "ticks",
    (CFO).integration_algorithm = MIN ];
  repeated int64 camera_clock_max_time                     = 64 [
    (CFO).desc = "Maximum event time for each of the camera clocks.",
    (CFO).units = "ticks",
    (CFO).integration_algorithm = MAX ];

  calin.ix.math.histogram.Histogram1DData log10_delta_t_histogram = 70 [
    (CFO).desc = "Histogram of log10 of time between consecutive events; log10(DeltaT/s)." ];
  calin.ix.math.histogram.Histogram1DData log10_delta2_t_histogram = 71 [
    (CFO).desc = "Histogram of log10 of time between next-to-consecutive events; "
      "log10(Delta2T/s)." ];

  calin.ix.math.histogram.Histogram1DData log10_delta_t_histogram_trigger_physics = 72 [
    (CFO).desc = "Histogram of log10 of time between consecutive events "
      "for all physics triggers; log10(DeltaT/s)." ];
  calin.ix.math.histogram.Histogram1DData log10_delta2_t_histogram_trigger_physics = 73 [
    (CFO).desc = "Histogram of log10 of time between next-to-consecutive "
      "events for all sets of two consecutibe physics triggers; log10(Delta2T/s)." ];
  calin.ix.math.histogram.Histogram1DData log10_delta_t_histogram_2_trigger_physics = 74 [
    (CFO).desc = "Histogram of log10 of time between consecutive events "
      "where there are two consecutive physics triggers; log10(DeltaT/s)." ];

  calin.ix.math.histogram.Histogram1DData log10_delta_t_histogram_all_recorded = 75 [
    (CFO).desc = "Histogram of log10 of time between RECORDED events; log10(DeltaT/s)." ];

  uint64 num_delta_t_all_recorded_not_positive             = 76 [
    (CFO).desc = "Number of events where time did not move forward with "
      "respect to previous recorded event.",
    (CFO).is_counter = true ];

  repeated ModuleRunInfo module                            = 100;
};

message PartialModuleRunInfo {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  uint64 num_events_present                                = 1 [ (CFO).is_counter = true ];
  calin.ix.diagnostics.range.RunLengthEncodingBool module_presence = 10;
  repeated calin.ix.diagnostics.range.RunLengthEncodingInt64 counter_value = 20;
  repeated calin.ix.math.histogram.Histogram1DData counter_value_squared_sum_histogram = 21;
};

message PartialRunInfo {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  uint64 num_events_found                                  = 1 [ (CFO).is_counter = true ];
  uint64 num_events_missing_cdts                           = 2 [ (CFO).is_counter = true ];
  uint64 num_events_missing_tib                            = 3 [ (CFO).is_counter = true ];
  uint64 num_events_missing_swat                           = 4 [ (CFO).is_counter = true ];
  uint64 num_events_missing_modules                        = 5 [ (CFO).is_counter = true ];
  uint64 num_duplicate_event_numbers                       = 6 [ (CFO).is_counter = true ];
  uint64 num_events_missing_tib_and_cdts                   = 7 [ (CFO).is_counter = true ];

  repeated uint64 event_number_sequence                    = 30 [
    (CFO).integration_algorithm = APPEND ];
  calin.ix.diagnostics.range.RunLengthEncodingBool cdts_presence         = 31;
  calin.ix.diagnostics.range.RunLengthEncodingBool tib_presence          = 32;
  calin.ix.diagnostics.range.RunLengthEncodingBool swat_presence         = 33;
  calin.ix.diagnostics.range.RunLengthEncodingBool all_channels_presence = 34;

  uint64 num_mono_trigger                                  = 40 [ (CFO).is_counter = true ];
  uint64 num_stereo_trigger                                = 41 [ (CFO).is_counter = true ];
  uint64 num_external_calibration_trigger                  = 42 [ (CFO).is_counter = true ];
  uint64 num_internal_calibration_trigger                  = 43 [ (CFO).is_counter = true ];
  uint64 num_ucts_aux_trigger                              = 44 [ (CFO).is_counter = true ];
  uint64 num_pedestal_trigger                              = 45 [ (CFO).is_counter = true ];
  uint64 num_slow_control_trigger                          = 46 [ (CFO).is_counter = true ];
  uint64 num_busy_trigger                                  = 47 [ (CFO).is_counter = true ];
  uint64 num_tib_ucts_trigger_code_mismatch                = 48 [ (CFO).is_counter = true ];

  int64 min_event_time                                     = 50 [ (CFO).integration_algorithm = MIN ];
  int64 max_event_time                                     = 51 [ (CFO).integration_algorithm = MAX ];
  repeated int64 camera_clock_presence                     = 52 [ (CFO).integration_algorithm = SUM, (CFO).is_counter = true ];
  repeated int64 camera_clock_min_time                     = 53 [ (CFO).integration_algorithm = MIN ];
  repeated int64 camera_clock_max_time                     = 54 [ (CFO).integration_algorithm = MAX ];
  repeated int64 event_time_sequence                       = 55 [ (CFO).integration_algorithm = APPEND ];
  repeated uint32 event_type_sequence                      = 56 [ (CFO).integration_algorithm = APPEND ];

  repeated PartialModuleRunInfo module                     = 100;
};
