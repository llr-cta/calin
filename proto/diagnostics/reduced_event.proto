/*

   calin/proto/diagnostics/reduced_event.proto -- Stephen Fegan -- 2025-02-20

   Protobufs for reduced events

   Copyright 2025, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";

package calin.ix.diagnostics.reduced_event;

enum SignalType {
  SIGNAL_NONE                   = 0;
  SIGNAL_UNIQUE_GAIN            = 1;
  SIGNAL_HIGH_GAIN              = 2;
  SIGNAL_LOW_GAIN               = 3;
};

message OneGainChargeSums {
  repeated SignalType channel_signal_type                   = 1 [
    (CFO).desc = "Signal type present in the channel. One entry for each "
      "configured channel in the run.", (CFO).int32_type = INT_8 ];
  repeated uint32 max_index                                 = 2 [
    (CFO).desc = "Index of maximum signal within readout window in samples.",
    (CFO).units = "samples", (CFO).int32_type = INT_16 ];
  repeated uint32 max_sample                                = 3 [
    (CFO).desc = "Maximum sample within readout window.",
    (CFO).units = "DC", (CFO).int32_type = INT_16 ];
  repeated uint32 bkg_win_qsum                              = 4 [
    (CFO).desc = "Integrated charges in background window.",
    (CFO).units = "Sum DC", (CFO).int32_type = INT_32 ];
  repeated uint32 sig_win_qsum                              = 5 [
    (CFO).desc = "Integrated charges in signal window.",
    (CFO).units = "Sum DC", (CFO).int32_type = INT_32 ];
  repeated uint32 opt_win_qsum                              = 6 [
    (CFO).desc = "Integrated charges in optimal window.",
    (CFO).units = "Sum DC", (CFO).int32_type = INT_32 ];
  repeated uint32 opt_win_qtsum                             = 7 [
    (CFO).desc = "Integrated charges * index in optimal window.",
    (CFO).units = "Sum DC * samples", (CFO).int32_type = INT_32 ];
  repeated uint32 opt_win_index                             = 8 [
    (CFO).desc = "Index of start of optimal window within readout window in samples.",
    (CFO).units = "samples", (CFO).int32_type = INT_16 ];
  repeated uint32 all_win_qsum                              = 9 [
    (CFO).desc = "Integrated charges in readout window.",
    (CFO).units = "DC", (CFO).int32_type = INT_32 ];
};

enum TriggerType {
  TRIGGER_UNKNOWN               = 0;
  TRIGGER_PHYSICS               = 1;
  TRIGGER_SOFTWARE              = 2;
  TRIGGER_PEDESTAL              = 3;
  TRIGGER_EXTERNAL_FLASHER      = 4;
  TRIGGER_INTERNAL_FLASHER      = 5;
  TRIGGER_FORCED_BY_ARRAY       = 6;
  TRIGGER_UCTS_AUX              = 7;
  TRIGGER_MULTIPLE              = 8;
};

message L0TriggerMap {
  repeated int32 trigger_hit                               = 1 [
    (CFO).desc = "Trigger image (movie). Highest bit (negative value) flags "
      "absence of trigger readout for this channel. Lower bits indicate if "
      "trigger is flagged during window.", 
    (CFO).int32_type = INT_8  ];
};

message ReducedEvent {
  uint64 local_event_number                                = 1 [
    (CFO).desc = "Event number." ];
  int32 telescope_id                                       = 2 [
    (CFO).desc = "Telescope ID." ];
  TriggerType trigger_type                                 = 3 [
    (CFO).desc = "Type of trigger." ];
  uint64 absolute_event_time_ns                            = 4 [
    (CFO).desc = "Absolute event time in nanoseconds.",
    (CFO).units = "ns" ];

  OneGainChargeSums gain1                                  = 100 [
    (CFO).desc = "First gain charge sums." ];
  OneGainChargeSums gain2                                  = 101 [
    (CFO).desc = "Second gain charge sums." ];
  L0TriggerMap l0_trigger_map                              = 102 [
    (CFO).desc = "LO trigger status for each channel." ];
};
