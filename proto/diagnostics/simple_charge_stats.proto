/*

   calin/proto/diagnostics/simple_charge_stats.proto -- Stephen Fegan -- 2020-03-20

   Protobufs for (simple-sum) channel charge stats

   Copyright 2020, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";
import "math/histogram.proto";

package calin.ix.diagnostics.simple_charge_stats;

message SimpleChargeStatsConfig {
  int32 high_gain_wf_clipping_value                                 = 1 [
    (CFO).desc = "Waveform value above which the high-gain signal should be "
      "considered as clipped.",
    (CFO).units = "DC" ];
  int32 low_gain_wf_clipping_value                                  = 2 [
    (CFO).desc = "Waveform value abov which the low-gain signal should be "
      "considered as clipped.",
    (CFO).units = "DC" ];
  int32 nearest_neighbor_nchannel_threshold                         = 3 [
    (CFO).desc = "Number of neighboring channels nominally needed to trigger." ];
  double ped_time_hist_resolution                                   = 20 [
    (CFO).desc = "Resolution of pedestal mean and variance vs time histogram.",
    (CFO).units = "s" ];
  double dual_gain_sample_resolution                                = 21 [
    (CFO).desc = "Resolution of high-gain vs low-gain max sample histogram.",
    (CFO).units = "DC" ];
  double dual_gain_sum_resolution                                   = 22 [
    (CFO).desc = "Resolution of high-gain vs low-gain window sum histogram.",
    (CFO).units = "DC" ];
};

message OneGainSimpleChargeStats {
  repeated int64 all_trigger_event_count                            = 10 [
    (CFO).desc = "Number of events for which gain is present." ];
  repeated double all_trigger_ped_win_mean                          = 11 [
    (CFO).desc = "Mean of pedestal-window charge estimate in over all events.",
    (CFO).units = "DC" ];
  repeated double all_trigger_ped_win_var                           = 12 [
    (CFO).desc = "Variance of pedestal-window charge estimate over all events.",
    (CFO).units = "DC^2" ];
  repeated int64 all_trigger_num_wf_clipped                         = 13 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  repeated int64 ped_trigger_event_count                            = 20 [
    (CFO).desc = "Number of pedestal events for gain channel is present." ];
  repeated double ped_trigger_full_wf_mean                          = 21 [
    (CFO).desc = "Mean of full-waveform charge estimate over pedestal events.",
    (CFO).units = "DC" ];
  repeated double ped_trigger_full_wf_var                           = 22 [
    (CFO).desc = "Variance of full-waveform charge estimate over pedestal events.",
    (CFO).units = "DC^2" ];
  repeated double ped_trigger_ped_win_mean                          = 23 [
    (CFO).desc = "Mean of pedestal-window charge estimate over pedestal events.",
    (CFO).units = "DC" ];
  repeated double ped_trigger_ped_win_var                           = 24 [
    (CFO).desc = "Variance of pedestal-window charge estimate over pedestal events.",
    (CFO).units = "DC^2" ];
  repeated double ped_trigger_sig_win_mean                          = 25 [
    (CFO).desc = "Mean of signal-window charge estimate over pedestal events.",
    (CFO).units = "DC" ];
  repeated double ped_trigger_sig_win_var                           = 26 [
    (CFO).desc = "Variance of signal-window charge estimate over pedestal events.",
    (CFO).units = "DC^2" ];
  repeated double ped_trigger_opt_win_mean                          = 27 [
    (CFO).desc = "Mean of optimal-window charge estimate over pedestal events.",
    (CFO).units = "DC" ];
  repeated double ped_trigger_opt_win_var                           = 28 [
    (CFO).desc = "Variance of optimal-window charge estimate over pedestal events.",
    (CFO).units = "DC^2" ];
  repeated int64 ped_trigger_num_wf_clipped                         = 29 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  repeated int64 ext_trigger_event_count                            = 40 [
    (CFO).desc = "Number of external-flasher events for gain channel is present." ];
  repeated double ext_trigger_opt_win_mean                          = 41 [
    (CFO).desc = "Mean of full-waveform charge estimate over external-flasher events.",
    (CFO).units = "DC" ];
  repeated double ext_trigger_opt_win_var                           = 42 [
    (CFO).desc = "Variance of full-waveform charge estimate for external-flasher events.",
    (CFO).units = "DC^2" ];
  repeated double ext_trigger_sig_win_mean                          = 43 [
    (CFO).desc = "Mean of signal-window charge estimate for external-flasher events.",
    (CFO).units = "DC" ];
  repeated double ext_trigger_sig_win_var                           = 44 [
    (CFO).desc = "Variance of signal-window charge estimate for external-flasher events.",
    (CFO).units = "DC^2" ];
  int64 ext_trigger_all_channel_count                               = 45 [
    (CFO).desc = "Number of external-flasher events for which all channels are present." ];
  double ext_trigger_all_channel_opt_win_mean                       = 46 [
    (CFO).desc = "Mean of sum of optimal-window charge estimate over all "
      "channels for external-flasher events.",
    (CFO).units = "DC" ];
  double ext_trigger_all_channel_opt_win_var                        = 47 [
    (CFO).desc = "Variance of sum of optimal-window charge estimate over all "
      "channels for external-flasher events.",
    (CFO).units = "DC^2" ];
  double ext_trigger_all_channel_sig_win_mean                       = 48 [
    (CFO).desc = "Mean of sum of signal-window charge estimate over all "
      "channels for external-flasher events.",
    (CFO).units = "DC" ];
  double ext_trigger_all_channel_sig_win_var                        = 49 [
    (CFO).desc = "Histogram of sum of signal-window charge estimate over all "
      "channels for external-flasher events.",
    (CFO).units = "DC^2" ];
  repeated int64 ext_trigger_num_wf_clipped                         = 50 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  repeated int64 phy_trigger_event_count                            = 60 [
    (CFO).desc = "Number of external-flasher events for gain channel is present." ];
  repeated int64 phy_trigger_num_wf_clipped                         = 61 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  repeated int64 int_trigger_event_count                            = 80 [
    (CFO).desc = "Number of external-flasher events for gain channel is present." ];
  repeated int64 int_trigger_num_wf_clipped                         = 81 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  calin.ix.math.histogram.Histogram1DData camera_all_trigger_ped_win_count_vs_time = 90 [
    (CFO).desc = "Number of events vs time in the all-event pedestal histograms.",
    (CFO).units = "s (bin-units), events (weight-units)"];
  calin.ix.math.histogram.Histogram1DData camera_all_trigger_ped_win_mean_vs_time = 91 [
    (CFO).desc = "Histogram of time evolution of mean of the pedestal-window "
      "charge estimate over all events.",
    (CFO).units = "s (bin-units), DC (weight-units)"];
  calin.ix.math.histogram.Histogram1DData camera_all_trigger_ped_win_var_vs_time = 92 [
    (CFO).desc = "Histogram of time evolution of variance of the pedestal-window "
      "charge estimate over all events.",
    (CFO).units = "s (bin-units), DC^2 (weight-units)"];

  calin.ix.math.histogram.Histogram1DData camera_ped_trigger_full_wf_count_vs_time = 93 [
    (CFO).desc = "Number of events vs time in the all-event pedestal histograms.",
    (CFO).units = "s (bin-units), events (weight-units)"];
  calin.ix.math.histogram.Histogram1DData camera_ped_trigger_full_wf_mean_vs_time = 94 [
    (CFO).desc = "Histogram of time evolution of mean of full-waveform "
      "charge estimate over pedestal events.",
    (CFO).units = "s (bin-units), DC (weight-units)"];
  calin.ix.math.histogram.Histogram1DData camera_ped_trigger_full_wf_var_vs_time = 95 [
    (CFO).desc = "Histogram of time evolution of variance of full-waveform "
      "charge estimate over pedestal events.",
    (CFO).units = "s (bin-units), DC^2 (weight-units)"];

  repeated calin.ix.math.histogram.Histogram1DData all_trigger_ped_win_count_vs_time = 100 [
    (CFO).desc = "Number of events vs time in the all-event pedestal histograms.",
    (CFO).units = "s (bin-units), events (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_trigger_ped_win_mean_vs_time = 101 [
    (CFO).desc = "Histogram of time evolution of mean of the pedestal-window "
      "charge estimate over all events.",
    (CFO).units = "s (bin-units), DC (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_trigger_ped_win_var_vs_time = 102 [
    (CFO).desc = "Histogram of time evolution of variance of the pedestal-window "
      "charge estimate over all events.",
    (CFO).units = "s (bin-units), DC^2 (weight-units)"];

  repeated calin.ix.math.histogram.Histogram1DData ped_trigger_full_wf_count_vs_time = 110 [
    (CFO).desc = "Number of events vs time in the all-event pedestal histograms.",
    (CFO).units = "s (bin-units), events (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData ped_trigger_full_wf_mean_vs_time = 111 [
    (CFO).desc = "Histogram of time evolution of mean of full-waveform "
      "charge estimate over pedestal events.",
    (CFO).units = "s (bin-units), DC (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData ped_trigger_full_wf_var_vs_time = 112 [
    (CFO).desc = "Histogram of time evolution of variance of full-waveform "
      "charge estimate over pedestal events.",
    (CFO).units = "s (bin-units), DC^2 (weight-units)"];
};

message DualGainSimpleChargeStats {
  repeated calin.ix.math.histogram.Histogram1DData all_max_sample_count = 10 [
    (CFO).desc = "Number of events binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), events (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_max_sample_mean = 11 [
    (CFO).desc = "Mean of high-gain maximum sample binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), HG-DC (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_max_sample_var = 12 [
    (CFO).desc = "Variance of high-gain maximum sample binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), HG-DC^2 (weight-units)"];

  repeated calin.ix.math.histogram.Histogram1DData all_opt_sum_count = 20 [
    (CFO).desc = "Number of events binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), events (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_opt_sum_mean = 21 [
    (CFO).desc = "Mean of high-gain optimal waveform sum binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), HG-DC (weight-units)"];
  repeated calin.ix.math.histogram.Histogram1DData all_opt_sum_var = 22 [
    (CFO).desc = "Variance of high-gain optimal waveform sum binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), HG-DC^2 (weight-units)"];
};

message SimpleChargeStats {
  OneGainSimpleChargeStats high_gain                                = 10 [
    (CFO).desc = "Stats for high-gain (in two gain cameras) or unique-gain channel." ];
  OneGainSimpleChargeStats low_gain                                 = 11 [
    (CFO).desc = "Stats for low-gain channel if camera supports two gain channels." ];
  DualGainSimpleChargeStats dual_gain                               = 20 [
    (CFO).desc = "Stats for dual-gain channel if camera supports two gain channels." ];
  repeated int64 channel_triggered_count                            = 30 [
    (CFO).desc = "Number of events for which the trigger bit is set for each channel." ];
  repeated int64 phy_trigger_few_neighbor_channel_triggered_count   = 31 [
    (CFO).desc = "Number of events for which the trigger bit is set for each channel "
      "in physics events where the nearest-neighbor trigger is seemingly not "
      "satisfied." ];
  calin.ix.math.histogram.Histogram1DData num_channel_triggered_hist = 32 [
    (CFO).desc = "Histogram of number of channels triggered.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData num_contiguous_channel_triggered_hist = 33 [
    (CFO).desc = "Histogram of number of channels triggered.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData phy_trigger_num_channel_triggered_hist = 34 [
    (CFO).desc = "Histogram of number of channels triggered in physics events.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData phy_trigger_num_contiguous_channel_triggered_hist = 35 [
    (CFO).desc = "Histogram of number of channels triggered in physics events.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
};

message PartialOneGainChannelSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  int64 all_trig_num_events                                         = 10 [
    (CFO).desc = "Number of events channel present.",
    (CFO).is_counter=true ];
  int64 all_trig_ped_win_sum                                        = 11 [
    (CFO).desc = "Sum of pedestal window over all events.",
    (CFO).is_counter=true ];
  int64 all_trig_ped_win_sumsq                                      = 12 [
    (CFO).desc = "Sum of pedestal window squared over all events.",
    (CFO).is_counter=true ];
  int64 all_trig_num_wf_clipped                                     = 13 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  int64 ped_trig_num_events                                         = 20 [
    (CFO).desc = "Number of events channel present.",
    (CFO).is_counter=true ];
  int64 ped_trig_full_wf_sum                                        = 21 [
    (CFO).desc = "Sum of full waveform over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_full_wf_sumsq                                      = 22 [
    (CFO).desc = "Sum of full waveform squared over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_ped_win_sum                                        = 23 [
    (CFO).desc = "Sum of pedestal window over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_ped_win_sumsq                                      = 24 [
    (CFO).desc = "Sum of pedestal window squared over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_sig_win_sum                                        = 25 [
    (CFO).desc = "Sum of signal window over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_sig_win_sumsq                                      = 26 [
    (CFO).desc = "Sum of signal window squared over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_opt_win_sum                                        = 27 [
    (CFO).desc = "Sum of optimal window over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_opt_win_sumsq                                      = 28 [
    (CFO).desc = "Sum of optimal window squared over pedestal events.",
    (CFO).is_counter=true ];
  int64 ped_trig_num_wf_clipped                                     = 29 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  int64 ext_trig_num_events                                         = 30 [
    (CFO).desc = "Number of events channel present.",
    (CFO).is_counter=true ];
  int64 ext_trig_sig_win_sum                                        = 31 [
    (CFO).desc = "Sum of signal window over external-flasher events.",
    (CFO).is_counter=true ];
  int64 ext_trig_sig_win_sumsq                                      = 32 [
    (CFO).desc = "Sum of signal window squared over external-flasher events.",
    (CFO).is_counter=true ];
  int64 ext_trig_opt_win_sum                                        = 33 [
    (CFO).desc = "Sum of optimal window over external-flasher events.",
    (CFO).is_counter=true ];
  int64 ext_trig_opt_win_sumsq                                      = 34 [
    (CFO).desc = "Sum of optimal window squared over external-flasher events.",
    (CFO).is_counter=true ];
  int64 ext_trig_num_wf_clipped                                     = 35 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  int64 phys_trig_num_events                                        = 40 [
    (CFO).desc = "Number of events channel present.",
    (CFO).is_counter=true ];
  int64 phys_trig_num_wf_clipped                                    = 41 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  int64 int_trig_num_events                                         = 50 [
    (CFO).desc = "Number of events channel present.",
    (CFO).is_counter=true ];
  int64 int_trig_num_wf_clipped                                     = 51 [
    (CFO).desc = "Number of events where waveform is clipped.",
    (CFO).is_counter=true ];

  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_1_sum    = 100 [
    (CFO).desc = "Histogram of number of all events vs time." ];
  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_q_sum    = 101 [
    (CFO).desc = "Histogram of pedestal-window charge from all events vs time." ];
  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_q2_sum   = 102 [
    (CFO).desc = "Histogram of pedestal-window charge squared from all events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_1_sum    = 120 [
    (CFO).desc = "Histogram of number of ped events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_q_sum    = 121 [
    (CFO).desc = "Histogram of total charge from ped events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_q2_sum   = 122 [
    (CFO).desc = "Histogram of total charge squared from ped events vs time." ];
}

message PartialDualGainChannelSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  calin.ix.math.histogram.Histogram1DData all_max_sample_1 = 10 [
    (CFO).desc = "Number of events binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), events (weight-units)"];
  calin.ix.math.histogram.Histogram1DData all_max_sample_q = 11 [
    (CFO).desc = "Sum of high-gain maximum sample binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), HG-DC (weight-units)"];
  calin.ix.math.histogram.Histogram1DData all_max_sample_q2 = 12 [
    (CFO).desc = "Sum of high-gain maximum sample squared binned by low-gain maximum sample.",
    (CFO).units = "LG-DC (bin-units), HG-DC^2 (weight-units)"];

  calin.ix.math.histogram.Histogram1DData all_opt_sum_1 = 20 [
    (CFO).desc = "Number of events binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), events (weight-units)"];
  calin.ix.math.histogram.Histogram1DData all_opt_sum_q = 21 [
    (CFO).desc = "Sum of high-gain optimal waveform sum binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), HG-DC (weight-units)"];
  calin.ix.math.histogram.Histogram1DData all_opt_sum_q2 = 22 [
    (CFO).desc = "Sum of high-gain optimal waveform sum squared binned by low-gain optimal waveform sum.",
    (CFO).units = "LG-DC (bin-units), HG-DC^2 (weight-units)"];
};

message PartialChannelSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  PartialOneGainChannelSimpleChargeStats high_gain                  = 10 [
    (CFO).desc = "High-gain (in two gain cameras) or unique-gain channel." ];
  PartialOneGainChannelSimpleChargeStats low_gain                   = 11 [
    (CFO).desc = "Low-gain channel if camera supports two gain channels." ];
  PartialDualGainChannelSimpleChargeStats dual_gain                 = 12 [
    (CFO).desc = "Dual-gain stats if camera supports two gain channels." ];

  int64 all_trig_num_events_triggered                               = 20 [
    (CFO).desc = "Number of events where channel has trigger bit set.",
    (CFO).is_counter=true ];
  int64 phy_trig_few_neighbor_channel_triggered_count               = 21 [
    (CFO).desc = "Number of events for which the trigger bit is set for each channel "
      "in physics events where the nearest-neighbor trigger is seemingly not "
      "satisfied.",
    (CFO).is_counter=true ];
};

message PartialOneGainCameraSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  int64 ext_trig_all_num_events                                   = 1 [
    (CFO).desc = "Number of external-flasher events for which all channels are present.",
    (CFO).is_counter=true ];
  double ext_trig_all_sig_win_sum                                  = 2 [
    (CFO).desc = "Sum of sum of optimal-window charge for external-flasher events.",
    (CFO).is_counter=true ];
  double ext_trig_all_sig_win_sumsq                                = 3 [
    (CFO).desc = "Sum squared of sum of optimal-window charge for external-flasher events.",
    (CFO).is_counter=true ];
  double ext_trig_all_opt_win_sum                                  = 4 [
    (CFO).desc = "Sum of sum of optimal-window charge for external-flasher events.",
    (CFO).is_counter=true ];
  double ext_trig_all_opt_win_sumsq                                = 5 [
    (CFO).desc = "Sum squared of sum of optimal-window charge for external-flasher events.",
    (CFO).is_counter=true ];

  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_1_sum    = 50 [
    (CFO).desc = "Histogram of number of all complete events vs time." ];
  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_q_sum    = 51 [
    (CFO).desc = "Histogram of pedestal-window charge from all complete events vs time." ];
  calin.ix.math.histogram.Histogram1DData all_trig_pedwin_vs_time_q2_sum   = 52 [
    (CFO).desc = "Histogram of pedestal-window charge squared from all complete events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_1_sum    = 60 [
    (CFO).desc = "Histogram of number of complete ped events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_q_sum    = 61 [
    (CFO).desc = "Histogram of total charge from complete ped events vs time." ];
  calin.ix.math.histogram.Histogram1DData ped_trig_vs_time_q2_sum   = 62 [
    (CFO).desc = "Histogram of total charge squared from complete ped events vs time." ];
};

message PartialCameraSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  PartialOneGainCameraSimpleChargeStats high_gain                  = 10 [
    (CFO).desc = "High-gain (in two gain cameras) or unique-gain channel." ];
  PartialOneGainCameraSimpleChargeStats low_gain                   = 11 [
    (CFO).desc = "Low-gain channel if camera supports two gain channels." ];
  uint64 num_event_trigger_hitmap_found                            = 20 [
    (CFO).desc = "Number of events for which the trigger hitmap was found.",
    (CFO).is_counter=true ];
  calin.ix.math.histogram.Histogram1DData num_channel_triggered_hist = 22 [
    (CFO).desc = "Histogram of number of channels triggered.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData num_contiguous_channel_triggered_hist = 23 [
    (CFO).desc = "Histogram of number of channels triggered.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData phys_trig_num_channel_triggered_hist = 24 [
    (CFO).desc = "Histogram of number of channels triggered in physics-trigger events.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
  calin.ix.math.histogram.Histogram1DData phys_trig_num_contiguous_channel_triggered_hist = 25 [
    (CFO).desc = "Histogram of number of channels triggered in physics-trigger events.",
    (CFO).units = "channels (bin-units), events (weight-units)" ];
};

message PartialSimpleChargeStats {
  option (CMO).message_integration_function = MIF_AUTOMATIC;

  repeated PartialChannelSimpleChargeStats channel                  = 100 [
    (CFO).desc = "Computed statistics for each configured channel" ];

  PartialCameraSimpleChargeStats  camera                            = 200 [
    (CFO).desc = "Computed statistics for full camera" ];
};
