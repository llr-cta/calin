/*

   calin/proto/diagnostics/clock_regression.proto -- Stephen Fegan -- 2020-05-28

   Protobufs for clock regression diagnostics

   Copyright 2020, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";

package calin.ix.diagnostics.clock_regression;


enum ClockPartitionMode {
  SINGLE_PARTITION                                         = 0;
  PARTITION_BY_CLOCK_SEQUENCE_ID                           = 1;
  PARTITION_BY_LOCAL_EVENT_NUMBER                          = 2;
  PARTITION_BY_MASTER_CLOCK                                = 3;
};

message SingleClockRegressionConfig {
  string clock_name                                        = 1 [
    (CFO).desc = "Name of the camera of module clock to calculate regression on." ];
  int32 clock_id                                           = 2 [
    (CFO).desc = "ID of camera or module clock to calculate regression on. "
      "This is overridden by the clock_name parameter if it is present," ];
  ClockPartitionMode partition_mode                        = 3 [
    (CFO).desc = "How to partition the clock data into bins." ];
  int64 partition_bin_size                                 = 4 [
    (CFO).desc = "Size of clock partition bins, either in events or ticks of "
      "principal clock." ];
  int64 principal_clock_divisor                            = 5 [
    (CFO).desc = "Divisor to apply to principal clock before regression. Should "
      "only be used if there is a risk of overflow of the 64-bit "
      "accumulators." ];
  bool include_possibly_suspect_time_values                = 6 [
    (CFO).desc = "Include values of the test clock that are flagged as "
      "possibly suspicious in the regression." ];
};

message ClockRegressionConfig {
  string principal_clock_name                              = 1 [
    (CFO).desc = "Master camera clock name to use in regression." ];
  int32 principal_clock_id                                 = 2 [
    (CFO).desc = "Master camera clock id to use in regression. "
      "This is overridden by the principal_clock_name parameter if it is present." ];
  bool include_possibly_suspect_principal_time_values      = 3 [
    (CFO).desc = "Include values of the principal clock that are flagged as "
      "possibly suspicious in the regression." ];
  int32 rebalance_nevent                                   = 4 [
    (CFO).desc = "Number of events between rebalancing, if positive, or "
      "do not do rebalancing otherwise." ];

  repeated SingleClockRegressionConfig camera_clocks       = 10;
  repeated SingleClockRegressionConfig module_clocks       = 11;

  repeated SingleClockRegressionConfig default_nectarcam_camera_clocks = 100;
  repeated SingleClockRegressionConfig default_nectarcam_module_clocks = 101;
  repeated SingleClockRegressionConfig default_lstcam_camera_clocks = 110;
  repeated SingleClockRegressionConfig default_lstcam_module_clocks = 111;
};

message ClockRegressionParameters {
  int64 x0                                                 = 1 [
    (CFO).desc = "Principal clock value at origin of regression.",
    (CFO).units = "principal-clock ticks" ];
  int64 y0                                                 = 2 [
    (CFO).desc = "Test clock value at origin of regression.",
    (CFO).units = "test-clock ticks" ];
  uint32 num_entries                                       = 3 [
    (CFO).desc = "Number of entries in regression." ];
  double a                                                 = 4 [
    (CFO).desc = "Linear regression slope coefficient (test-clock ticks per "
      "principal-clock tick).",
    (CFO).units = "test-clock ticks/principal-clock ticks" ];
  double b                                                 = 5 [
    (CFO).desc = "Linear regression offset coefficient (test-clock offset from "
      "test-clock origin at origin of principal clock).",
    (CFO).units = "test-clock ticks" ];
  double d2                                                = 6 [
    (CFO).desc = "Total least-squares residual.",
    (CFO).units = "test-clock ticks squared" ];
};

message SingleClockRegressionResults {
  string clock_name                                        = 1;
  int32 clock_id                                           = 2;
  map<uint32, ClockRegressionParameters> bins              = 3;
};

message ModuleClockRegressionResults {
  repeated SingleClockRegressionResults modules            = 1;
};

message ClockRegressionResults {
  string principal_clock_name                              = 1;
  int32 principal_clock_id                                 = 2;
  repeated SingleClockRegressionResults camera_clock       = 3;
  repeated ModuleClockRegressionResults module_clock       = 4;
};
