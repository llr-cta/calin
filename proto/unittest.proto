//-*-mode:protobuf; mode:font-lock;-*-

/* 

   calin/proto/unittest.proto -- Stephen Fegan -- 2015-09-13

   Protobufs for testing code in calin

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"
   
   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.
    
   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "common_types.proto";

package calin.ix.unittest;

message UnitTestSimpleSubMessage {
  int32   ssm_i32 = 1 [(CFO).desc="$PARENT_DESC$ Integer 32 value",
                       (CFO).units="$PARENT_UNITS$"];
}

message UnitTestComplexSubMessage {
  int32   csm_i32 = 1;
  UnitTestSimpleSubMessage csm_ssm = 2;
}

message UnitTestInlinedSubMessage {
  int32   ism_i32 = 1;
  UnitTestSimpleSubMessage ism_ssm = 2 [(CFO).sql.inline_message = true];
}

message UnitTestVectorSubMessage {
  repeated int32 vsm_vec_i32 = 1;
  repeated UnitTestSimpleSubMessage vsm_vec_ssm  = 2;
}

message UnitTestOneofSubMessage {
  oneof oo_sm_base {
    int32   oosm_i32                  = 991;
    string  oosm_s                    = 992;
    UnitTestSimpleSubMessage oosm_ssm = 993;
    UnitTestSimpleSubMessage oosm_ssm_inline = 994 [
        (CFO).sql.inline_message = true];
  };
}

message UnitTestMessage {
  enum EnumType {
    UNKNOWN = 0;
    STARTED = 1;
    RUNNING = 2;
  }

  int32   i32    = 1 [(CFO).desc="An int32 value"];
  int64   i64    = 2;
  float   f      = 3 [(CFO).desc="A float value",(CFO).units="The units"];
  string  s      = 4;
  UnitTestSimpleSubMessage ssm = 5 [(CFO).desc="Non-inline SSM. ",
                                    (CFO).units="SSM units"];
  UnitTestSimpleSubMessage ssm_inline = 6 [(CFO).desc="Inline SSM. ",
                                    (CFO).units="iSSM units",
                                    (CFO).sql.inline_message = true];
  UnitTestComplexSubMessage csm = 7;
  UnitTestComplexSubMessage csm_inline = 8 [(CFO).sql.inline_message = true];
  UnitTestInlinedSubMessage ism = 9;
  UnitTestInlinedSubMessage ism_inline = 10 [(CFO).sql.inline_message = true];
  UnitTestVectorSubMessage vsm = 11;
  UnitTestVectorSubMessage vsm_inline = 12 [(CFO).sql.inline_message = true];

  double  d = 13 [(CFO).desc = "A multi-line\ndescription!"];
  uint32  ui32 = 14;
  uint64  ui64 = 15;
  sint32  si32 = 16;
  sint64  si64 = 17;
  fixed32 fi32 = 18;
  fixed64 fi64 = 19;
  sfixed32 sfi32 = 20;
  sfixed64 sfi64 = 21;
  bool b = 22;
  bytes bb = 23;
  EnumType e = 24;

  uint32  ui16 = 25 [(CFO).int32_type = INT_16];
  uint32  ui8  = 26 [(CFO).int32_type = INT_8];
  int32   i16  = 27 [(CFO).int32_type = INT_16];
  int32   i8   = 28 [(CFO).int32_type = INT_8];

  UnitTestSimpleSubMessage ssm_empty = 29;
  
  repeated int32   vec_i32  = 101;
  repeated int64   vec_i64  = 102;
  repeated float   vec_f    = 103;
  repeated string  vec_s    = 104;
  repeated UnitTestSimpleSubMessage vec_ssm = 105;
  repeated UnitTestSimpleSubMessage vec_ssm_inline = 106 [(CFO).sql.inline_message = true];
  repeated UnitTestComplexSubMessage vec_csm = 107;
  repeated UnitTestComplexSubMessage vec_csm_inline = 108 [(CFO).sql.inline_message = true];
  repeated UnitTestInlinedSubMessage vec_ism = 109;
  repeated UnitTestInlinedSubMessage vec_ism_inline = 110 [(CFO).sql.inline_message = true];
  repeated UnitTestVectorSubMessage vec_vsm = 111;

  repeated double  vec_d = 113;
  repeated uint32  vec_ui32 = 114;
  repeated uint64  vec_ui64 = 115;
  repeated sint32  vec_si32 = 116;
  repeated sint64  vec_si64 = 117;
  repeated fixed32 vec_fi32 = 118;
  repeated fixed64 vec_fi64 = 119;
  repeated sfixed32 vec_sfi32 = 120;
  repeated sfixed64 vec_sfi64 = 121;
  repeated bool vec_b = 122;
  repeated bytes vec_bb = 123;
  repeated EnumType vec_e = 124;

  map<string, int32> map_i32 = 201;
  map<string, UnitTestSimpleSubMessage> map_ssm = 205;
  map<string, UnitTestComplexSubMessage> map_csm = 207;
  map<string, UnitTestInlinedSubMessage> map_ism = 209;
  map<string, UnitTestVectorSubMessage> map_vsm = 211;

  oneof oo_base {
    int32   oo_i32                  = 301;
    string  oo_s                    = 302;
    UnitTestSimpleSubMessage oo_ssm = 303;
    UnitTestSimpleSubMessage oo_ssm_inline = 304 [
        (CFO).sql.inline_message = true];
  };

  UnitTestOneofSubMessage oosm              = 400;
  UnitTestOneofSubMessage oosm_inline       = 401 [
      (CFO).sql.inline_message = true];
  repeated UnitTestOneofSubMessage vec_oosm = 402;

  common_types.Vector3D pos = 500 [(CFO).desc="Position vector. ",
                      (CFO).units="cm"];  
}

message UnitTestKey {
  int32 user_key_i32 = 1  [(CFO).desc="An int32 key value"];
  string user_key_string = 2  [(CFO).desc="A string key value"];
  UnitTestSimpleSubMessage user_key_ssm = 3 [(CFO).desc="A submessage key",
                                             (CFO).sql.inline_message = true];
}
