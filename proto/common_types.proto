//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/common_types.proto -- Stephen Fegan -- 2015-10-19

   Protobufs for common types across the calin package

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

option cc_enable_arenas = true;

import "calin.proto";

package calin.ix.common_types;

message EarthCoordinates
{
  option (CMO).sql.default_inline_message = true;

  double latitude                       = 1
    [(CFO).desc = "Latitude of position. North positive.",
     (CFO).units = "deg", (CFO).min_val=-90, (CFO).max_val=90];
  double longitude                      = 2
    [(CFO).desc = "Longitude of position. East positive.",
     (CFO).units = "deg", (CFO).min_val=-180, (CFO).max_val=180];
  double elevation                      = 3
    [(CFO).desc = "Height of position above the reference ellipsoid,. "
                  "perpendicular to surface on ellipsoid at given latitude "
                  "and longitude. Up positive.",
     (CFO).units = "cm"];
  string datum                          = 4 // should be an enum?
    [(CFO).desc = "Datum. If not specified assume WGS84."];
};

message HorizontalCoordinates
{
  option (CMO).sql.default_inline_message = true;

  double altitude                       = 1
    [(CFO).desc = "Angle of point with respect to the local horizon, with"
     "horizon at 0 and zenith at +90.",
     (CFO).units = "deg", (CFO).min_val=-90, (CFO).max_val=90];
  double azimuth                        = 2
    [(CFO).desc = "Angle of point with respect to the local meridian, with"
     "North at 0 and East at +90.",
     (CFO).units = "deg", (CFO).min_val=0, (CFO).max_val=360];
};

message EquatorialCoordinates
{
  option (CMO).sql.default_inline_message = true;

  enum EpochTimeUnits {
    JULIAN_YEARS                        = 0; // e.g. 2000.0
    BESSELIAN_YEARS                     = 1; // e.g. 1950.0 obsolete
    JULIAN_DATE                         = 2; // e.g. 2451544.500000
    MODIFIED_JULIAN_DATE                = 3; // e.g. 51544.0
  };

  double declination                    = 1
    [(CFO).desc = "Anglar distance of point from celestial equator in "
     "given epoch, positive to the North and negative to the South. Points "
     "on the celestial equator have Dec = 0, while the North celestial pole "
     "is at Dec = +90.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Declination",
     (CFO).units = "deg", (CFO).min_val=-90, (CFO).max_val=90];
  double right_ascension                = 2
    [(CFO).desc = "Angular distance measured eastward along the celestial "
     "equator between the vernal equinox and the hour circle of the point "
     "[Wikipedia]. The vernal equinox has RA = 0, a point culminating 6 hours "
     "later has RA = +90.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Right_ascension",
     (CFO).units = "deg", (CFO).min_val=0, (CFO).max_val=360];
  double precessional_epoch             = 3
    [(CFO).desc = "Reference epoch for the RA and Dec.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Epoch_(astronomy)",
     (CFO).units = "epoch_units"];
  EpochTimeUnits epoch_units            = 4
    [(CFO).desc = "Units of precessional_epoch.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Epoch_(astronomy)"];
};

message StringifiedEquatorialCoordinates
{
  option (CMO).sql.default_inline_message = true;

  string declination                    = 1
    [(CFO).desc = "Anglar distance of point from celestial equator in "
     "given epoch, positive to the North and negative to the South. Points "
     "on the celestial equator have Dec = 00:00:00, while the North celestial "
     " pole is at Dec = +90:00:00. Format should be [+/-]DDD:MM:SS.SSS or "
     "[+/-]DDDdMMmSSsSSS.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Declination",
     (CFO).units = "dms", (CFO).min_val=-90, (CFO).max_val=90];
  string right_ascension                = 2
    [(CFO).desc = "Angular distance measured eastward along the celestial "
     "equator between the vernal equinox and the hour circle of the point "
     "[Wikipedia]. The vernal equinox has RA = 00:00:00, a point culminating "
     "6 hours later has RA = 06:00:00. Format should be HH:MM:SS.SSS or "
     "HHhMMmSSsSSS.",
     (CFO).ref = "https://en.wikipedia.org/wiki/Right_ascension",
     (CFO).units = "hms", (CFO).min_val=0, (CFO).max_val=24];
  string precessional_epoch             = 3
    [(CFO).desc = "Reference epoch for the RA and Dec. Valid formats are "
     "JYYYY.YYY or YYYY.YY (Julian years), BYYYY.YY (Besselian years), "
     "DDDDDDD.DDD (Julian date), or DDDDD.DDD (Modified Julian date)",
     (CFO).ref = "https://en.wikipedia.org/wiki/Epoch_(astronomy)",
     (CFO).units = "years or days"];
};

message FlexableCelestialCoordinates
{
  oneof type {
    EquatorialCoordinates radec                      = 1;
    StringifiedEquatorialCoordinates radec_string    = 2;
  };
};

message Time
{
  option (CMO).sql.default_inline_message = true;

  int64 time_ns                         = 1
    [(CFO).desc = "$PARENT_DESC_PS$. If time is absolute then this should be "
       "the number of TAI nanoseconds since the epoch of midnight of "
       "1970-01-01 UTC.",
     (CFO).units = "ns"];
};

message SpectralResponsePoint
{
  double energy                         = 1
    [(CFO).desc = "Photon energy.",
     (CFO).units = "eV"];
  double response                       = 2
    [(CFO).desc = "Response at given energy."];
};

message Vector3D
{
  double x                              = 1
    [(CFO).desc = "X element of vector : v(0)." ];
  double y                              = 2
    [(CFO).desc = "Y element of vector : v(1)." ];
  double z                              = 3
    [(CFO).desc = "Z element of vector : v(2)." ];
};

message Matrix3D
{
  double xx                             = 1
    [(CFO).desc = "XX element of matrix : m(0,0)." ];
  double xy                             = 2
    [(CFO).desc = "XY element of matrix : m(0,1)." ];
  double xz                             = 3
    [(CFO).desc = "XZ element of matrix : m(0,2)." ];
  double yx                             = 4
    [(CFO).desc = "YX element of matrix : m(1,0)." ];
  double yy                             = 5
    [(CFO).desc = "YY element of matrix : m(1,1)." ];
  double yz                             = 6
    [(CFO).desc = "YZ element of matrix : m(1,2)." ];
  double zx                             = 7
    [(CFO).desc = "ZX element of matrix : m(2,0)." ];
  double zy                             = 8
    [(CFO).desc = "ZY element of matrix : m(2,1)." ];
  double zz                             = 9
    [(CFO).desc = "ZZ element of matrix : m(2,2)." ];
};

message EulerAngles3D
{
  enum RotationOrder {
    XYX                                 = 0;
    YZY                                 = 1;
    ZXZ                                 = 2;
    ZYZ                                 = 3;
    YXY                                 = 4;
    XZX                                 = 5;
  };

  RotationOrder rotation_order          = 1
    [(CFO).desc = "Order of rotations. For example, if the order is YXY then a "
      "point initially at r=(x,y,z) will end up at "
      "r_prime=R_Y(alpha)R_X(beta)R_Y(gamma)r" ];
  double alpha                          = 2
    [(CFO).desc = "First rotation angle [0,360].", (CFO).units="deg" ];
  double beta                           = 3
    [(CFO).desc = "Second rotation angle [0,180].", (CFO).units="deg" ];
  double gamma                          = 4
    [(CFO).desc = "Third rotation angle [0,360].", (CFO).units="deg" ];
};
