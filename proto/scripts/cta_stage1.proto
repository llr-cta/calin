/*

   calin/proto/scripts/cta_stage1.proto -- Stephen Fegan -- 2020-07-22

   Protobufs for command line options and results of cta_stage1.py

   Copyright 2020, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
// import "provenance/anthology.proto";
// import "iact_data/telescope_run_configuration.proto";
import "iact_data/cta_data_source.proto";
import "iact_data/zfits_data_source.proto";
// import "util/options_processor.proto";
import "io/zmq_data_source.proto";
import "diagnostics/stage1.proto";


package calin.ix.scripts.cta_stage1;

message CommandLineOptions {
  uint32 run_number                                        = 1 [
    (CFO).desc = "Run number." ];

  string o                                                 = 10 [
    (CFO).desc = "SQLite3 output file name." ];
  string db_stage1_table_name                             = 11 [
    (CFO).desc = "Table name of results structure in database." ];
  bool truncate_db                                         = 12 [
    (CFO).desc = "Truncate the SQLite3 file when opening it. Warning, this "
      "will delete all data present in the DB." ];
  bool skip_existing                                       = 13 [
    (CFO).desc = "Skip runs (files) that are already in the DB. Runs are matched "
      "based on the full path name specified. Only applies to files (not ZMQ endpoints)."];
  bool replace_existing                                    = 14 [
    (CFO).desc = "Replace runs (files) that are already in the DB. Runs are matched "
      "based on the full path name specified. This option has no effect if "
      "\"skip_existing\" is also specified. Only applies to files (not ZMQ endpoints)." ];
  uint32 start_file_index                                  = 15 [
    (CFO).desc = "Set the start index if multiple files are given. Only really "
      "useful for processing a large list of runs where one of the runs caused "
      "the processing to teminate with a segfault. Hopefully this never happens."];

  uint32 log_frequency                                     = 20 [
    (CFO).desc = "Print a message to log every \"log_frequency\" events." ];
  int32 nthread                                            = 21 [
    (CFO).desc = "Number of computation threads. A value of -1 disables "
      "threading completely." ];
  string copy_ancillary_db                                 = 22 [
    (CFO).desc = "Specify directory to which the ancillary database should be copied "
      "before processing the data file. If left blank no copy is made, the ancillary "
      "database will be read from its original place. This option is useful " 
      "when processing data on NSF filesystems as SQLITE3 perfromance is bad "
      "on these systems. Autotomatically sents the \"stage1.ancillary_database_directory\" "
      "option." ];

  calin.ix.iact_data.cta_data_source.CTACameraEventDecoderConfig decoder = 30 [
    (CFO).desc = "CTA event decoder options." ];
  calin.ix.iact_data.zfits_data_source.ZFITSDataSourceConfig zfits = 31 [
    (CFO).desc = "Options for ZFITS data streams." ];
  calin.ix.io.zmq_data_source.ZMQDataSourceConfig zmq      = 32 [
    (CFO).desc = "Options for ZMQ data streams." ];

  calin.ix.diagnostics.stage1.Stage1Config stage1          = 40 [
    (CFO).desc = "Options for Stage1 diagnostic calculator." ];
};

// message Results {
//   calin.ix.io.options_processor.CommandLineArguments command_line_arguments = 1 [
//     (CFO).desc = "Command line options passed to script." ];
//   CommandLineOptions command_line_options                  = 2 [
//     (CFO).desc = "Command line options passed to script." ];
//   calin.ix.provenance.anthology.Anthology provenance       = 3 [
//     (CFO).desc = "Provenance information." ];
//
//   calin.ix.iact_data.telescope_run_configuration.TelescopeRunConfiguration run_config = 10 [
//     (CFO).desc = "Run configuration." ];
//
//   calin.ix.diagnostics.run_info.RunInfo run_info           = 20;
// };
