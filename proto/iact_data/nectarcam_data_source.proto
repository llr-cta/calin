/*

   calin/proto/iact_data/nectarcam_data_source.proto -- Stephen Fegan -- 2016-01-13

   Protobufs for configuration of NectarCamZFITSDataSource

   Copyright 2016, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole Polytechnique, CNRS/IN2P3

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";

package calin.ix.iact_data.nectarcam_data_source;

message NectarCamCameraEventDecoderConfig {
  enum CameraType {
    AUTOMATIC                                              = 0;
    NECTARCAM                                              = 1;
    NECTARCAM_TESTBENCH_19CHANNEL                          = 2;
  };

  enum ExchangeGainMode {
    EXCHANGE_GAIN_MODE_AUTOMATIC                           = 0;
    EXCHANGE_GAIN_MODE_NONE                                = 1;
    EXCHANGE_GAIN_MODE_FORCED                              = 2;
  };

  CameraType camera_type                                   = 1 [
    (CFO).desc = "Camera type." ];
  ExchangeGainMode exchange_gain_channels                  = 2 [
    (CFO).desc = "Exchange high and low gains from NectarCam ZFits file." ];
  bool include_serialized_raw_data                         = 3 [
    (CFO).desc = "Include serialized raw ACTL protobuf header and event data." ];
  string demand_nmc_xml_file                               = 10 [
    (CFO).desc = "NectarCam module configuration XML file to use, or empty "
      "if automatic search based on data file should be tried." ];
  string nmc_xml_suffix                                    = 11 [
    (CFO).desc = "Suffix of NectarCam module configuration XML file for "
      "automatic search." ];
  uint32 demand_nsample                                    = 100 [
    (CFO).desc = "Override number of samples per event stored in file. Zero "
      "means we use value from file."];
  repeated uint32 demand_configured_module_id              = 101 [
    (CFO).desc = "Ids of modules present in file, overrides what is stored "
      "in camera header. Must have number of entries to match number of "
      "channels in data." ];
};
