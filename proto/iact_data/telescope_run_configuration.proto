/*

   calin/proto/iact_data/telescope_run_configuration.proto
                                                -- Stephen Fegan -- 2016-03-14

   Protobufs for run-wise instrument configuration

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";
import "common_types.proto";
import "iact_data/instrument_layout.proto";
import "iact_data/lstcam_configuration.proto";
import "iact_data/nectarcam_configuration.proto";

package calin.ix.iact_data.telescope_run_configuration;

enum SerializedRawHeaderType {
  SERIALIZED_RAW_HEADER_NONE                               = 0;
  SERIALIZED_RAW_HEADER_ACTL_L0_PROTOBUF                   = 1;
  SERIALIZED_RAW_HEADER_ACTL_R1_PROTOBUF                   = 2;
};

message TelescopeRunConfiguration {
  string filename                                          = 1 [
    (CFO).desc = "Primary filename of run data." ];
  repeated string fragment_filename                        = 2 [
    (CFO).desc = "Filenames of run data fragments." ];
  uint32 run_number                                        = 3 [
    (CFO).desc = "Run number." ];
  common_types.Time run_start_time                         = 4 [
    (CFO).desc = "Approximate start date and time of run, possibly from NTP on "
      "camera server." ];
  uint32 telescope_id                                      = 5 [
    (CFO).desc = "Telescope ID." ];

  repeated int32 configured_channel_index                  = 11 [
    (CFO).desc = "Index within list of configured channels for each channel "
      "in the camera, or -1 if channel is not configued." ];
  repeated int32 configured_channel_id                     = 12 [
    (CFO).desc = "Id of each channel configured in the run." ];

  repeated int32 configured_module_index                   = 21 [
    (CFO).desc = "Index within list of configured modules for each module "
      "in the camera, or -1 if module is not configued." ];
  repeated int32 configured_module_id                      = 22 [
    (CFO).desc = "Id of each module configured in the run." ];

  uint32 num_samples                                       = 31 [
    (CFO).desc = "Number of samples in each trace." ];
  double nominal_sampling_frequency                        = 32 [
    (CFO).desc = "Nominal DAQ waveform sampling frequency, or zero if unknown. May "
      "not be calibrated.", (CFO).units = "MHz" ];

  uint64 configuration_id                                  = 50 [
    (CFO).desc = "Key into database describing camera configuration." ];
  string camera_server_serial_number                       = 51 [
    (CFO).desc = "Serial number of the computer that the camera server is "
      "running on." ];
  string data_model_version                                = 52 [
    (CFO).desc = "Version of data model." ];

  calin.ix.iact_data.instrument_layout.
      CameraLayout camera_layout                           = 101 [
    (CFO).desc = "Camera layout." ];

  oneof camera_specific_configuration {
    calin.ix.iact_data.nectarcam_configuration.NectarCamCameraConfiguration nectarcam = 200 [
      (CFO).desc = "NectarCam configuration elements." ];
    calin.ix.iact_data.lstcam_configuration.LSTCamCameraConfiguration lstcam = 201 [
      (CFO).desc = "LSTCam configuration elements." ];
  }

  SerializedRawHeaderType serialized_raw_header_type        = 998 [
    (CFO).desc = "Flag describing type of serialized raw header data included.",
    (CFO).sql.dont_store = true ];
  bytes serialized_raw_header                               = 999 [
    (CFO).desc = "Serialized raw header.", (CFO).sql.dont_store = true ];
  string data_transcoder                                    = 1000 [
    (CFO).desc = "Class name of data encoder / decoder that is producing this "
      "header and accociated events." ];
};
