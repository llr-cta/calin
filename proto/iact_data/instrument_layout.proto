//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/iact_data/instrument_layout.proto -- Stephen Fegan -- 2015-12-21

   Protobufs for instrument layout (channel, module, camera, telescope, array)

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";
import "common_types.proto";

package calin.ix.iact_data.instrument_layout;

message OutlinePolygon {
  repeated uint32 outline_polygon_vertex_index             = 1 [
    (CFO).desc = "Index of end of pixel polygon lines." ];
  repeated double outline_polygon_vertex_x                 = 2 [
    (CFO).desc = "X coordinates of an open polygon that represents the "
      "outline of the pixel.",
    (CFO).units = "cm" ];
  repeated double outline_polygon_vertex_y                 = 3 [
    (CFO).desc = "Y coordinates of an open polygon that represents the "
      "outline of the pixel.",
    (CFO).units = "cm" ];
};

message ChannelLayout {
  uint32 channel_index                                     = 1 [
    (CFO).desc = "Sequential index of channel corresponding to this channel "
      "in camera. This must be identical to index that this channel has in the "
      "telescope channel array." ];
  int32 pixel_index                                        = 2 [
    (CFO).desc = "Index of pixel that this channel corresponds to. A value "
      "of -1 means there is no (sky facing) pixel associated with this "
      "channel. It may, for example have an enginnering signal applied etc. It "
      "is likely this corresponds either to \"channel_index\" or "
      "\"pixel_spiral_index\" depending on the politics of the camera "
      "collaboration." ];
  int32 pixel_grid_index                                   = 3 [
    (CFO).desc = "Index of pixel within hexagonal or square grid if the "
      "camera follows a grid, -1 otherwise." ];
  int32 channel_set_index                                  = 4 [
    (CFO).desc = "Index of the channel-set that this channel belongs to. "
      "This is generally used in a graded camera, which has multiple "
      "sets different pixel types. It can also denote which of the different "
      "engineering signals is connected to the channel." ];
  int32 module_index                                       = 5 [
    (CFO).desc = "Index of the module that this channel belongs to, if "
      "appropriate; -1 otherwise." ];
  int32 module_channel_index                               = 6 [
    (CFO).desc = "Index of the channel within the module that it belongs to, "
      "if appropriate; -1 otherwise." ];
  int32 pixel_grid_u                                       = 7 [
    (CFO).desc = "U-axis index of pixel within hexagonal or square grid if the "
      "camera follows a grid, 0 otherwise." ];
  int32 pixel_grid_v                                       = 8 [
    (CFO).desc = "V-axis index of pixel within hexagonal or square grid if the "
      "camera follows a grid, 0 otherwise." ];
  int32 pixel_spiral_index                                 = 9 [
    (CFO).desc = "Index of pixel that this channel corresponds to using a "
      "spiral labeling system starting from center. A value of -1 means there "
      "is no (sky facing) pixel associated with this channel. It may, for "
      "example have an enginnering signal applied etc." ];

  double x                                                 = 10 [
    (CFO).desc = "X-position of pixel center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
    (CFO).units = "cm" ];
  double y                                                 = 11 [
    (CFO).desc = "Y-position of pixel center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
    (CFO).units = "cm" ];
  double diameter                                          = 12 [
    (CFO).desc = "Diameter of circle that would fit in pixel without "
      "overlapping any other pixels.",
    (CFO).units = "cm" ];
  double geometric_area                                    = 13 [
    (CFO).desc = "Geometric area of pixel.",
    (CFO).units = "cm^2" ];

  repeated uint32 neighbour_channel_indexes                = 20 [
    (CFO).desc = "Indexes of the channels for all neigbouring pixels. "
      "This forms a commutative relationship between the two channels." ];
  bool is_boundary_pixel                                   = 21 [
    (CFO).desc = "True if channel corresponds to pixel on edge of camera." ];
  repeated uint32 trigger_patch_indexes                    = 22 [
    (CFO).desc = "Indexes of the patches to which this channel belongs." ];

  repeated uint32 outline_polygon_vertex_index             = 30 [
    (CFO).desc = "Index of end of pixel polygon lines." ];
  repeated double outline_polygon_vertex_x                 = 31 [
    (CFO).desc = "X coordinates of an open polygon that represents the "
      "outline of the pixel.",
    (CFO).units = "cm" ];
  repeated double outline_polygon_vertex_y                 = 32 [
    (CFO).desc = "Y coordinates of an open polygon that represents the "
      "outline of the pixel.",
    (CFO).units = "cm" ];
};

message ModuleLayout {
  uint32 module_index                                      = 1 [
    (CFO).desc = "Sequential index of module in camera. This must be identical "
      "to index that this module has in the telescope module array." ];
  int32 module_grid_index                                  = 2 [
    (CFO).desc = "Index of module within hexagonal or square grid if the "
      "camera follows a grid, -1 otherwise." ];
  int32 module_grid_u                                      = 3 [
    (CFO).desc = "U-axis index of module within hexagonal or square grid if the "
      "camera follows a grid, -1 otherwise." ];
  int32 module_grid_v                                      = 4 [
    (CFO).desc = "V-axis index of module within hexagonal or square grid if the "
      "camera follows a grid, -1 otherwise." ];
  int32 module_grid_i                                      = 5 [
    (CFO).desc = "For hexagonal grids this gives the LSTCam cluster \"i\" index, "
      "which is the same number as \"module_grid_v\". -1 otherwise." ];
  int32 module_grid_j                                      = 6 [
    (CFO).desc = "For hexagonal grids this gives the LSTCam cluster \"j\" index, "
      "which is the same number as \"2*module_grid_u+module_grid_v\". -1 otherwise." ];
  int32 module_spiral_index                                = 7 [
    (CFO).desc = "Index of module using a spiral labeling system starting from center." ];

  repeated int32 channels_in_module                        = 10 [
    (CFO).desc = "List of indexes for all channels in module." ];;
  double x                                                 = 20 [
    (CFO).desc = "X-position of module center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
    (CFO).units = "cm" ];
  double y                                                 = 21 [
    (CFO).desc = "Y-position of module center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
    (CFO).units = "cm" ];
  repeated uint32 outline_polygon_vertex_index             = 30 [
    (CFO).desc = "Index of end of module polygon lines." ];
  repeated double outline_polygon_vertex_x                 = 31 [
    (CFO).desc = "X coordinates of an open polygon that represents the "
      "outline of the module.",
    (CFO).units = "cm" ];
  repeated double outline_polygon_vertex_y                 = 32 [
    (CFO).desc = "Y coordinates of an open polygon that represents the "
      "outline of the module.",
    (CFO).units = "cm" ];
};

message TriggerPatchLayout {
  uint32 patch_index                                       = 1 [
    (CFO).desc = "Sequential index of the trigger patch in camera." ];
  repeated int32 channels_in_patch                         = 10 [
    (CFO).desc = "List of channel indexes that belong to this trigger patch." ];
  repeated uint32 outline_polygon_vertex_index             = 30 [
    (CFO).desc = "Index of end of module polygon lines." ];
  repeated double outline_polygon_vertex_x                 = 31 [
    (CFO).desc = "X coordinates of an open polygon that represents the "
      "outline of the module.",
    (CFO).units = "cm" ];
  repeated double outline_polygon_vertex_y                 = 32 [
    (CFO).desc = "Y coordinates of an open polygon that represents the "
      "outline of the module.",
    (CFO).units = "cm" ];
};

message CameraLayout {
  enum CameraType {
    NO_CAMERA                                              = 0;
    NECTARCAM                                              = 10;
    LSTCAM                                                 = 11;
    NECTARCAM_TESTBENCH_19CHANNEL                          = 1000;
    NECTARCAM_TESTBENCH_61CHANNEL                          = 1001;
  };

  enum PixelGridLayout {
    NO_GRID                                                = 0;
    HEX_GRID                                               = 1;
    SQUARE_GRID                                            = 2;
  };

  enum ADCGains {
    SINGLE_GAIN                                            = 0;
    PARALLEL_DUAL_GAIN                                     = 1;
    SWITCHED_DUAL_GAIN                                     = 2;
  };

  CameraType camera_type                                   = 1 [
    (CFO).desc = "Camera type." ];
  uint32 camera_number                                     = 2 [
    (CFO).desc = "Number of camera within series" ];

  repeated ChannelLayout channel                           = 10 [
    (CFO).desc = "Channels in the telescope, arranged in the same order as "
      "they appear in the data." ];
  PixelGridLayout pixel_grid_layout                        = 11 [
    (CFO).desc = "Layout of pixels on the grid, if appropriate." ];
  double pixel_grid_spacing                                = 12 [
    (CFO).desc = "Linear distance between pixels on the grid.",
    (CFO).units = "cm" ];
  double pixel_grid_rotation                               = 13 [
    (CFO).desc = "Rotation angle to align grid with pixels. This defines "
      "a rotation matrix R_mat, such that the position of the pixels on the "
      "camera, y_vec, can be calculated from the grid sites, x_vec, as "
      "y_vec = s * R_mat * x_vec + dy_vec, "
      "where s is the (scalar) grid spacing and dy_vec is the grid offset.",
    (CFO).units = "deg" ];
  double pixel_grid_cos_rotation                           = 14 [
    (CFO).desc = "Cosine of the angle pixel_grid_rotation." ];
  double pixel_grid_sin_rotation                           = 15 [
    (CFO).desc = "Sine of the angle pixel_grid_rotation." ];
  double pixel_grid_offset_x                               = 16 [
    (CFO).desc = "X-offset of pixels from the grid.",
    (CFO).units = "cm" ];
  double pixel_grid_offset_y                               = 17 [
    (CFO).desc = "Y-offset of pixels from the grid.",
    (CFO).units = "cm" ];
  double pixel_grid_geometric_area                         = 18 [
    (CFO).desc = "Nominal size of pixel in grid.",
    (CFO).units = "cm^2" ];
  repeated int32 pixel_channel_index                       = 19 [
    (CFO).desc = "Index into channel array for each of the pixels, or -1 if "
      "that pixel is not connected to an electronics channel." ];
  repeated int32 pixel_spiral_channel_index                = 20 [
    (CFO).desc = "Index into channel array for each of the pixels in spiral "
      "order, or -1 if that pixel is not connected to an electronics channel." ];
  repeated uint32 boundary_pixel_channel_index             = 21 [
    (CFO).desc = "Index into channel array for each of the boundary pixels." ];
  double camera_boundary_box_left                          = 22 [
    (CFO).desc = "X coordinate of left edge of camera boundary box.",
    (CFO).units = "cm" ];
  double camera_boundary_box_right                         = 23 [
    (CFO).desc = "X coordinate of right edge of camera boundary box.",
    (CFO).units = "cm" ];
  double camera_boundary_box_bottom                        = 24 [
    (CFO).desc = "Y coordinate of bottom edge of camera boundary box.",
    (CFO).units = "cm" ];
  double camera_boundary_box_top                           = 25 [
    (CFO).desc = "Y coordinate of top edge of camera boundary box.",
    (CFO).units = "cm" ];
  double camera_boundary_maxabs_xy                         = 26 [
    (CFO).desc = "Maximum absolute values of X and Y corners of boundary box.",
    (CFO).units = "cm" ];
  double camera_boundary_max_r                             = 27 [
    (CFO).desc = "Maximum radius of vertices of camera boundary.",
    (CFO).units = "cm" ];

  uint32 channels_per_module                               = 30 [
    (CFO).desc = "Number of channels per module." ];
  repeated ModuleLayout module                             = 31 [
    (CFO).desc = "Layout of each module." ];
  repeated int32 module_spiral_module_index                = 32 [
    (CFO).desc = "Index into module array for each of the modules in spiral "
      "order." ];

  repeated TriggerPatchLayout trigger_patches              = 40 [
    (CFO).desc = "Layout of each trigger patch." ];

  ADCGains adc_gains                                       = 50;
  int32 adc_bits                                           = 51;
  bool can_read_waveforms                                  = 52;
  bool can_read_charges                                    = 53;
  bool can_read_peak_sample                                = 54;
  bool can_read_trigger_image                              = 55;
  int64 first_event_number                                 = 56;

  repeated string camera_clock_name                        = 60;
  repeated double camera_clock_frequency                   = 61 [
    (CFO).desc = "Frequency of camera clock.", (CFO).units = "Hz" ];

  repeated string module_clock_name                        = 62;
  repeated double module_clock_frequency                   = 63 [
    (CFO).desc = "Frequency of module clock.", (CFO).units = "Hz" ];

  repeated string module_counter_name                      = 64;

  repeated uint32 outline_polygon_vertex_index             = 70 [
    (CFO).desc = "Index of end of camera polygon lines." ];
  repeated double outline_polygon_vertex_x                 = 71 [
    (CFO).desc = "X coordinates of an open polygon that represents the "
      "outline of the camera.",
    (CFO).units = "cm" ];
  repeated double outline_polygon_vertex_y                 = 72 [
    (CFO).desc = "Y coordinates of an open polygon that represents the "
      "outline of the camera.",
    (CFO).units = "cm" ];
};

message TelescopeLayout {
  enum TelescopeType {
    NO_TELESCOPE                                           = 0;
    CTA_LST                                                = 1;
    CTA_MST                                                = 2;
    CTA_SCT                                                = 3;
  };

  TelescopeType telescope_type                             = 1 [
    (CFO).desc = "Telescope type." ];
  uint32 telescope_index                                   = 2 [
    (CFO).desc = "Index of telescope in array." ];

  common_types.Vector3D position                           = 10 [
    (CFO).desc = "Position of the telescope relative to the center of the "
      "array. The axes are +X, East, +Y, North, +Z, up.",
    (CFO).units = "cm" ];
  double effective_focal_length                            = 11 [
    (CFO).desc = "Effective focal length of the telescope, for converting "
      "linear dimensions on the camera plane to angles.",
    (CFO).units = "cm" ];

  CameraLayout camera                                      = 100 [
    (CFO).desc = "Camera layout." ];
};

message ArrayLayout {
  enum ArrayType {
    NO_ARRAY                                               = 0;
    CTA_NORTH                                              = 1;
    CTA_SOUTH                                              = 2;
  };

  ArrayType array_type                                     = 1 [
    (CFO).desc = "Array type." ];

  calin.ix.common_types.EarthCoordinates array_origin      = 10 [
    (CFO).desc = "Position of array on the Earth." ];

  repeated TelescopeLayout telescopes                      = 100 [
    (CFO).desc = "Telescope layouts." ];
}
