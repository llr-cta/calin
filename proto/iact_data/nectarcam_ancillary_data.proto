/*

   calin/proto/iact_data/nectarcam_ancillary_data.proto -- Stephen Fegan -- 2018-09-28

   Protobufs for NectarCAM ancillary (monioring & configuration) data

   Copyright 2018, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";

package calin.ix.iact_data.nectarcam_ancillary_data;

message NectarCAMAncillaryDataConfig {
  string sqlite3_database                                  = 1 [
    (CFO).desc = "Filename of NectarCAM ancillary SQLite3 database that "
      "has data for this period." ];
};

message FEBTemperatureMeasurement {
  int32 camera                                             = 1 [
    (CFO).desc = "Camera identifier." ];
  int32 drawer                                             = 2 [
    (CFO).desc = "Drawer identifier." ];
  // This limits resolution to 1 second
  fixed32 time                                             = 3 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
/*
  string time                                              = 4 [
    (CFO).desc = "Time of measurement." ];
*/
  float tfeb1                                              = 4 [
    (CFO).desc = "FEB temperature 1.", (CFO).units = "C" ];
  float tfeb2                                              = 5 [
    (CFO).desc = "FEB temperature 2.", (CFO).units = "C" ];
  float tatbp                                              = 6 [
    (CFO).desc = "Temperature at back plane.", (CFO).units = "C" ];
};

message FEBTemperatureMeasurementSet
{
  repeated FEBTemperatureMeasurement measurement           = 1;
};

message HVPACurrentMeasurement {
  int32 camera                                             = 1 [
    (CFO).desc = "Camera identifier." ];
  int32 drawer                                             = 2 [
    (CFO).desc = "Drawer identifier." ];
  int32 channel                                            = 3 [
    (CFO).desc = "Drawer channel number." ];
  // This limits resolution to 1 second
  fixed32 time                                             = 4 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
  float current                                            = 5 [
    (CFO).desc = "Cockroft-Walton supply current.", (CFO).units = "uA",
    (CFO).ref = "MST-CAM-RP-0286-IRFU" ];
  float load_current                                       = 6 [
    (CFO).desc = "HVPA board total current load.", (CFO).units = "uA",
    (CFO).ref = "MST-CAM-RP-0286-IRFU" ];
};

message HVPACurrentMeasurementSet
{
  repeated HVPACurrentMeasurement measurement              = 1;
};

message HVPAVoltageMeasurement {
  int32 camera                                             = 1 [
    (CFO).desc = "Camera identifier." ];
  int32 drawer                                             = 2 [
    (CFO).desc = "Drawer identifier." ];
  int32 channel                                            = 3 [
    (CFO).desc = "Drawer channel number." ];
  // This limits resolution to 1 second
  fixed32 time                                             = 4 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
  float voltage                                            = 5 [
    (CFO).desc = "Channel meadured voltage.", (CFO).units = "V" ];
};

message HVPAVoltageMeasurementSet
{
  repeated HVPAVoltageMeasurement measurement              = 1;
};

message ECCMeasurement {
  int32 camera                                             = 1 [
    (CFO).desc = "Camera identifier." ];
  fixed32 time                                             = 2 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
  int32 state                                              = 3;
	float temp_avg                                           = 4;
	float temp_01                                            = 5;
	float temp_02                                            = 6;
	float temp_03                                            = 7;
	float temp_04                                            = 8;
	float temp_05                                            = 9;
	float temp_06                                            = 10;
	float temp_09                                            = 11;
	float temp_10                                            = 12;
	float temp_11                                            = 13;
	float temp_12                                            = 14;
	float current_psb1                                       = 15;
	float current_psb2                                       = 16;
	float fan_speed_03                                       = 17;
	float fan_speed_04                                       = 18;
	float air_pressure_diff                                  = 19;
	float water_pressure_01                                  = 20;
	float water_pressure_02                                  = 21;
	float humidity                                           = 22;
	bool back_doors_open                                     = 23;
	int32 shutter_status                                     = 24;
	float light_01                                           = 25;
	float light_02                                           = 26;
	float light_03                                           = 27;
	float light_04                                           = 28;
};

message ECCMeasurementSet
{
  repeated ECCMeasurement measurement                      = 1;
};

message NectarCAMAncillaryData {
  map<uint32, FEBTemperatureMeasurementSet> feb_temperature = 1 [
    (CFO).desc = "FEB temperature measurements grouped by drawer number." ];

  map<uint32, HVPACurrentMeasurementSet> hvpa_current      = 2 [
    (CFO).desc = "HVPA current measurements grouped by channel number." ];

  map<uint32, HVPAVoltageMeasurementSet> hvpa_voltage      = 3 [
    (CFO).desc = "HVPA voltage measurements grouped by channel number." ];

  ECCMeasurementSet ecc_measurements                       = 4 [
    (CFO).desc = "ECC measurements." ];
};

message SelectByTime {
  fixed32 time                                             = 1 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
};

message SelectByTimeString {
  string time                                              = 1 [
    (CFO).desc = "Time of measurement." ];
};

message SelectByTimeAndCamera {
  int32 camera                                             = 1 [
    (CFO).desc = "Camera identifier." ];
  fixed32 time                                             = 2 [
    (CFO).desc = "Time of measurement.", (CFO).units = "s",
    (CFO).sql.transform=TRANSFORM_UNIXTIME_TOFROM_DATETIME ];
};
