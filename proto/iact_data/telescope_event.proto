//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/iact_data/telescope_event.proto -- Stephen Fegan -- 2015-12-19

   Protobufs for defining single-telescope event

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole Polytechnique, CNRS/IN2P3

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";
option cc_enable_arenas = true;

import "calin.proto";
import "common_types.proto";

package calin.ix.iact_data.telescope_event;

message Clock {
  int32 clock_id                                            = 1 [
    (CFO).desc = "Clock ID." ];
  common_types.Time time                                    = 2 [
    (CFO).desc = "Time according to the clock." ];
};

message ModuleClocks {
  int32 module_id                                           = 1 [
    (CFO).desc = "Module ID within camera." ];
  repeated Clock clock                                      = 2 [
    (CFO).desc = "Clock data." ];
};

message Counter {
  int32 counter_id                                          = 1 [
    (CFO).desc = "Counter ID." ];
  int64 value                                               = 2 [
    (CFO).desc = "Value of counter." ];
};

message ModuleCounters {
  int32 module_id                                           = 1 [
    (CFO).desc = "Module ID within camera." ];
  repeated int32 counter_id                                 = 2 [
    (CFO).desc = "Ids of counters present." ];
  repeated int64 counter_value                              = 3 [
    (CFO).desc = "Counter values." ];
};

message NectarCamModuleData {
  int32 module_id                                           = 1 [
    (CFO).desc = "Module ID within camera." ];
  uint32 global_event_counter                               = 2 [
    (CFO).desc = "Event counter, starting from 1."];
  uint32 bunch_counter                                      = 3 [
    (CFO).desc = "Bunch counter, incremented by 1PPS signal, starting "
      "from 1 after receipt of first 1PPS."];
  uint32 event_counter                                      = 4 [
    (CFO).desc = "Event counter within bunch, reset by 1PPS signal, starting "
      "from 1."];
  uint32 ts1                                                = 5 [
    (CFO).desc = "125MHz counter, reset by 1PPS."];
  int32 ts2_event                                           = 6 [
    (CFO).desc = "2ns precision indicator for event."];
  int32 ts2_bunch                                           = 7 [
    (CFO).desc = "2ns precision indicator for 1PPS arrival."];
  uint32 ts2_empty                                          = 8 [
    (CFO).desc = "Empty value."];
  int32 bunch_event_time                                    = 9 [
    (CFO).desc = "Time within bunch, computed by combining TS1 and TS2.",
    (CFO).units = "ns" ];
};

message LSTCamModuleData {
  int32 module_id                                           = 1 [
    (CFO).desc = "Module ID within camera.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  uint32 event_counter                                      = 2 [
    (CFO).desc = "Event counter, starting from 1.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  uint32 trigger_counter                                    = 3 [
    (CFO).desc = "Thee number of triggers Dragon gets since the beginning of "
      "the run. Dragon counts the number of triggers even during the busy state "
      "i.e. readout dead time. Thus if there is a trigger issued during the busy "
      "state, trigger counter is incremented but the event counter is not. In "
      "this case there will be a jump of the trigger number in the next event "
      "data header.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  uint32 pps_counter                                        = 4 [
    (CFO).desc = "Counter incremented by 1PPS signal, reset to 0 "
      "when the run starts (i.e. when the TCP/IP connection is opened).",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  uint32 backplane_10megahertz_counter                      = 5 [
    (CFO).desc = "Counter of 10MHz clock generated by the backplane and distributed "
      "to all Dragon boards. This 10 MHz counter is reset to 0 at every PPS.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  uint64 local_133megahertz_counter                         = 6 [
    (CFO).desc = "Counter of 133MHz clock sythesized from the local "
      "oscillator on the Dragon boards. This counter is reset to 0 at the "
      "beginning of the run.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf"];
};

message CameraSpecificModuleData {
  oneof camera_specific_module_data {
    NectarCamModuleData nectarcam                           = 1 [
      (CFO).desc = "Module data from NectarCam." ];
    LSTCamModuleData lstcam                                 = 2 [
      (CFO).desc = "Module data from LSTCam." ];
  }
};

enum CDTSTriggerType {
  CDTS_TRIGGER_UNKNOWN          = 0;
  CDTS_TRIGGER_READOUT          = 1;
  CDTS_TRIGGER_BUSY             = 2;
  CDTS_TRIGGER_SOFT             = 3;
  CDTS_TRIGGER_EXTERNAL         = 4;
  CDTS_TRIGGER_FLATFIELD        = 5;
  CDTS_TRIGGER_SINGLE_PE        = 6;
  CDTS_TRIGGER_PEDESTAL         = 7;
  CDTS_TRIGGER_MUON             = 8;
  CDTS_TRIGGER_LIDAR            = 9;
};

message CDTSData {
  uint32 event_counter                                      = 1 [
    (CFO).desc = "Event counter, increased after each trigger." ];
  uint32 busy_counter                                       = 2 [
    (CFO).desc = "Counter for number of missed events due to busy?" ];
  uint32 pps_counter                                        = 3 [
    (CFO).desc = "Counter for the PPS pulses received by the camera "
      "from the UCTS since the last UCTS counter reset.",
    (CFO).units = "s" ];
  uint32 clock_counter                                      = 4 [
    (CFO).desc = "Counter for the clock cycles of the clock received by "
      "the camera from the UCTS; reset after each PPS." ];
  uint64 ucts_timestamp                                     = 5 [
    (CFO).desc = "TAI time stamp obtained via White Rabbit from the UCTS." ];
  uint64 camera_timestamp                                   = 6 [
    (CFO).desc = "Optional time stamp generated by the cameraâ€™s own "
      "timing system." ];
  uint32 trigger_type                                       = 7 [
    (CFO).desc = "Type of event that triggered the readout." ];
  uint32 white_rabbit_status                                = 8 [
    (CFO).desc = "Status of the White Rabbit synchronization." ];
  uint32 stereo_pattern                                     = 9 [
    (CFO).desc = "Stereo bit pattern from TIB." ];
  uint32 arbitrary_information                              = 10 [
    (CFO).desc = "Optional field for camera specific information." ];
  uint32 num_in_bunch                                       = 11 [
    (CFO).desc = "Number of events in TiCkS message bunch?" ];
  uint32 version                                            = 20 [
    (CFO).desc = "TiCkS version number. Version 0 does not implement "
      "\"busy_counter\" and \"num_in_bunch\", while Version 1 does not "
      "implement \"camera_timestamp\"." ];
};

message TIBData {
  uint32 event_counter                                     = 1 [
    (CFO).desc = "Event counter, increased after each trigger." ];
  uint32 pps_counter                                       = 2 [
    (CFO).desc = "Counter for the PPS pulses received by the camera "
      "from the UCTS since the last UCTS counter reset.",
      (CFO).units = "s" ];
  uint32 clock_counter                                      = 3 [
    (CFO).desc = "Counter for the (10MHz) clock cycles of the clock received "
      "by the camera from the UCTS; reset after each PPS.",
    (CFO).units = "us" ];
  uint32 stereo_pattern                                     = 4 [
    (CFO).desc = "Stereo bit pattern (9 bits)." ];

  bool mono_trigger                                         = 10 [
    (CFO).desc = "Mono trigger type bit set." ];
  bool stereo_trigger                                       = 11 [
    (CFO).desc = "Stereo trigger type bit set." ];
  bool external_calibration_trigger                         = 12 [
    (CFO).desc = "External calibration trigger type bit set." ];
  bool internal_calibration_trigger                         = 13 [
    (CFO).desc = "Internal calibration trigger type bit set." ];
  bool ucts_aux_trigger                                     = 14 [
    (CFO).desc = "UCTS auxiliary trigger type bit set." ];
  bool pedestal_trigger                                     = 15 [
    (CFO).desc = "Pedestal trigger type bit set." ];
  bool slow_control_trigger                                 = 16 [
    (CFO).desc = "Slow control trigger type bit set." ];
  bool busy_trigger                                         = 17 [
    (CFO).desc = "Busy trigger type bit set." ];

  uint32 spare_bits                                         = 20 [
    (CFO).desc = "Unused bits." ];
};

message IntegratedCharges {
  bool all_channels_present                                 = 1 [
    (CFO).desc = "True if waveforms for all channels are present. In this case "
      "the channel_index and channel_id arrays are permitted to be empty." ];
  repeated int32 channel_index                              = 2 [
    (CFO).desc = "Indexes within the image for all channels in the camera, or "
      "-1 if the the channel is not present." ];
  repeated int32 channel_id                                 = 3 [
    (CFO).desc = "IDs for channels with a charge present. If all channels in "
      "the camera are present then this can be empty." ];
  repeated uint32 charge                                    = 4 [
    (CFO).desc = "Integrated charges.",
    (CFO).units = "dc"];
  repeated uint32 peak_sample                               = 5 [
    (CFO).desc = "Time of peak signal within readout window in samples.",
    (CFO).units = "samples"];
  repeated uint32 time_over_threshold                       = 6 [
    (CFO).desc = "Time-over-threshold in samples.",
    (CFO).units = "samples"];
  repeated uint32 window_start                              = 7 [
    (CFO).desc = "Start of integration or sampling window if different from "
      "one channel to another.",
    (CFO).units = "samples"];
  repeated uint32 window_size                               = 8 [
    (CFO).desc = "Width of integration window if different from one channel "
      "to another.",
    (CFO).units = "samples"];
};

message ChannelWaveform {
  repeated int32 samples                                    = 1 [
    (CFO).desc = "Waveform for one channel.",
    (CFO).units = "dc" ];
};

message LSTCamWaveformsData {
  repeated uint32 drs_flag                                  = 1 [
    (CFO).desc = "The Dragon FPGA reads the \"stop channel (8bits pattern)\" from "
      "DRS4 before reading the charge stored in each capacitor. This flag is used "
      "for checking if the stop channel data is the expected one. When it "
      "reads unexpected stop channel value, the first bit of flag data goes "
      "high, otherwise they are 0s.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  repeated uint32 first_capacitor_id                        = 2 [
    (CFO).desc = "First capacitor ID for each of the channels.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
};

message Waveforms {
  bool all_channels_present                                 = 1 [
    (CFO).desc = "True if waveforms for all channels are present. In this case "
      "the channel_index and channel_id arrays are permitted to be empty." ];
  repeated int32 channel_index                              = 2 [
    (CFO).desc = "Indexes within the image for all channels in the camera, or "
      "-1 if the the channel is not present." ];
  repeated int32 channel_id                                 = 3 [
    (CFO).desc = "IDs for channels with a charge present. If all channels in "
      "the camera are present then this can be empty." ];
  repeated ChannelWaveform waveform                         = 5 [
    (CFO).desc = "Sampled waveforms.",
    (CFO).units = "dc" ];
  uint32 num_samples_per_channel                            = 6 [
    (CFO).desc = "Number of samples per channel if this is constant per event, "
      "zero otherwise.",
    (CFO).units = "samples" ];
  bytes raw_samples_array                                   = 7 [
    (CFO).desc = "Raw samples array. Sample j of channel i is stored as a U16 in "
      "little endian order starting at position "
      "2*(i*num_samples_per_channel+j). The size "
      "of raw_samples_array be larger than the data to allow for the system "
      "SIMD vector data type to be used on all samples." ];

  oneof camera_specific_waveforms_data {
    LSTCamWaveformsData lstcam                              = 10 [
      (CFO).desc = "LST specific waveform data." ];
  };
};

message LSTCamImageData {
  repeated uint32 first_capacitor_id                        = 1 [
    (CFO).desc = "First capacitor ID for each of the channels. Even channels "
      "that are not read out are kept in this array.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  repeated uint32 drs_flag                                  = 2 [
    (CFO).desc = "The Dragon FPGA reads the \"stop channel (8bits pattern)\" from "
      "DRS4 before reading the charge stored in each capacitor. This flag is used "
      "for checking if the stop channel data is the expected one. When it "
      "reads unexpected stop channel value, the first bit of flag data goes "
      "high, otherwise they are 0s. Even channels that are not read out are "
      "kept in this array.",
    (CFO).ref = "dragon_document_v5_3_00_04.pdf" ];
  repeated bool drs_tag_present                             = 3 [
    (CFO).desc = "True if DRS tag is present for each module." ];
  repeated ChannelWaveform drs_tag_waveform                 = 4 [
    (CFO).desc = "The 8th waveform digitised by each board? Not used for "
      "anything at the present time." ];
  repeated uint32 drs_tag_first_capacitor_id                = 5 [
    (CFO).desc = "First capacitor ID that corresponds to 8th channel." ];
};

message DigitizedSkyImage {
  IntegratedCharges camera_charges                          = 1 [
    (CFO).desc = "Integrated charge (waveform sum) in each of the pixels "
      "retained in the event." ];
  Waveforms camera_waveforms                                = 2 [
    (CFO).desc = "Regularly sampled waveform from each of the pixels "
      "retained in the event." ];

  oneof camera_specific_image_data {
    LSTCamImageData lstcam                                  = 10 [
      (CFO).desc = "LST specific image data." ];
  };
};

message ChannelTriggerMap {
  repeated uint32 hit_channel_id                            = 1 [
      (CFO).desc = "Channel ID for all channels that triggered." ];
};

enum TriggerType {
  TRIGGER_SCIENCE               = 0;
  TRIGGER_SOFTWARE              = 1;
  TRIGGER_PEDESTAL              = 2;
  TRIGGER_EXTENAL_FLASHER       = 3;
  TRIGGER_INTERNAL_FLASHER      = 4;
  TRIGGER_FORCED_BY_ARRAY       = 5;
};

enum ImageTreatmentMode {
  TREATMENT_SCIENCE             = 0;
  TREATMENT_PASS_THROUGH        = 1;
};

enum SerializedRawEventType {
  SERIALIZED_RAW_EVENT_NONE                                 = 0;
  SERIALIZED_RAW_EVENT_ACTL_PROTOBUF                        = 1;
};

message TelescopeEvent {
  uint64 source_event_index                                 = 1 [
    (CFO).desc = "Index of the event relative to the source." ];
  int32 telescope_id                                        = 2 [
    (CFO).desc = "Telescope ID." ];
  int64 local_event_number                                  = 3 [
    (CFO).desc = "Local (camera) event number." ];
  TriggerType trigger_type                                  = 4 [
    (CFO).desc = "Trigger type." ];
  bool array_trigger_received                               = 5 [
    (CFO).desc = "Flag for whether array trigger was received." ];
  int64 array_event_number                                  = 6 [
    (CFO).desc = "Array event number or \"-1\" if not received." ];

  bool all_modules_present                                  = 10 [
    (CFO).desc = "True if all modules are present in the image." ];
  repeated int32 module_index                               = 11 [
    (CFO).desc = "Index of each expected module in event, or -1 if module "
      "is not present in this event." ];
  repeated int32 module_id                                  = 12 [
    (CFO).desc = "Module id of each module present in the event ordered by "
      "its index in the data. For each module present in the event we are "
      "guarenteed that module_id[module_index[id]]=id."];

  common_types.Time absolute_event_time                     = 20 [
    (CFO).desc = "Best reconstructed absolute TAI time of event." ];
  common_types.Time elapsed_event_time                      = 21 [
    (CFO).desc = "Best reconstructed time of event since beginning of run." ];
  repeated Clock camera_clock                               = 22 [
    (CFO).desc = "Vector of camera clock times associated with event." ];
  repeated ModuleClocks module_clock                        = 23 [
    (CFO).desc = "Vector of camera clock times associated with event." ];


  TIBData tib_data                                          = 30 [
    (CFO).desc = "Raw TIB data values for this event." ];
  CDTSData cdts_data                                        = 31 [
    (CFO).desc = "Raw CDTS data values for this event." ];
  repeated CameraSpecificModuleData module_data             = 32 [
    (CFO).desc = "Camera-specific module data." ];

  repeated ModuleCounters module_counter                    = 40 [
    (CFO).desc = "Vector of module counter values associated with event." ];

  uint64 configuration_id                                   = 50 [
    (CFO).desc = "Key into database describing camera configuration." ];
  uint64 pedestal_dataset_id                                = 51 [
    (CFO).desc = "Key into database giving subtracted pedestal values." ];

  ImageTreatmentMode image_treatment                        = 99 [
    (CFO).desc = "Image treatment mode." ];
  DigitizedSkyImage image                                   = 100 [
    (CFO).desc = "Sky image recorded in a single-gain camera." ];
  DigitizedSkyImage high_gain_image                         = 101 [
    (CFO).desc = "Sky image recorded in the high-gain path of a dual-gain "
      "camera." ];
  DigitizedSkyImage low_gain_image                          = 102 [
    (CFO).desc = "Sky image recorded in the low-gain path of a dual-gain "
      "camera." ];

  ChannelTriggerMap trigger_map                             = 200 [
    (CFO).desc = "List of channels that triggered." ];

  SerializedRawEventType serialized_raw_event_type          = 998 [
    (CFO).desc = "Flag describing type of serialized raw event data included.",
    (CFO).sql.dont_store = true ];
  bytes serialized_raw_event                                = 999 [
    (CFO).desc = "Serialized raw event.", (CFO).sql.dont_store = true ];
};
