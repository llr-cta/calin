/*

   calin/proto/iact_data/functional_event_visitor.proto -- Stephen Fegan -- 2016-04-14

   Protobufs for configuration of functional event visitors

   Copyright 2016, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole Polytechnique, CNRS/IN2P3

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";

package calin.ix.iact_data.functional_event_visitor;

message FixedWindowSumFunctionalTelescopeEventVisitorConfig {
  int32 integration_0                                      = 1 [
    (CFO).desc = "Start of integration window in samples." ];
  uint32 integration_n                                     = 2 [
    (CFO).desc = "Size of integration window in samples." ];
};

message SlidingWindowSumFunctionalTelescopeEventVisitorConfig {
  uint32 integration_n                                     = 1 [
    (CFO).desc = "Size of integration window in samples." ];
};

message MeantimeTimingFunctionalTelescopeEventVisitorConfig {
  int32 pedestal_0                                         = 1 [
    (CFO).desc = "Start of pedestal integration window in samples." ];
  uint32 pedestal_n                                        = 2 [
    (CFO).desc = "Size of pedestal integration window in samples." ];
  int32 signal_0                                           = 3 [
    (CFO).desc = "Start of signal integration window in samples." ];
  uint32 signal_n                                          = 4 [
    (CFO).desc = "Size of signal integration window in samples." ];
  double pedestal_decay_constant                           = 5 [
    (CFO).desc = "Pedestal decay constant." ];
  repeated double high_gain_pedestal                       = 6 [
    (CFO).desc = "High gain pedestal single-sample baseline level." ];
  repeated double low_gain_pedestal                        = 7 [
    (CFO).desc = "Low gain pedestal single-sample baseline level." ];
};
