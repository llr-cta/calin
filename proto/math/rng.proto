//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/math/rng.proto -- Stephen Fegan -- 2015-11-25

   Protobufs for storing RNG state

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
//import "common_types.proto";

package calin.ix.math.rng;

message STLRNGCoreData
{
  fixed64 seed                          = 1
    [(CFO).desc = "RNG seed."];
  fixed64 calls                         = 2
    [(CFO).desc = "Number of calls to RNG to get to current state."];
  bool state_saved                      = 3
    [(CFO).desc = "True if RNG state is written. Will always be true if "
     "the protobuf is written by the code, but should not be if the protobuf "
     "is hand-crafted by the user."];
  string state                          = 4
    [(CFO).desc = "Current RNG state, implementation dependent."];
}

message Ranlux48RNGCoreData
{
  fixed64 seed                          = 1
    [(CFO).desc = "RNG seed."];
  fixed64 calls                         = 2
    [(CFO).desc = "Number of calls to RNG to get to current state."];
  bool state_saved                      = 3
    [(CFO).desc = "True if RNG state is written. Will always be true if "
     "the protobuf is written by the code, but should not be if the protobuf "
     "is hand-crafted by the user."];
  string state                          = 4
    [(CFO).desc = "Current RNG state, implementation dependent."];
  fixed64 dev                           = 5
    [(CFO).desc = "Saved deviate bits."];
  uint32 dev_blocks                     = 6
    [(CFO).desc = "Number of 16-bit blocks of deviates available in dev."];
}

message NR3RNGCoreData
{
  fixed64 seed                          = 1
    [(CFO).desc = "RNG seed."];
  fixed64 calls                         = 2
    [(CFO).desc = "Number of calls to RNG to get to current state."];
  bool state_saved                      = 3
    [(CFO).desc = "True if RNG state is written. Will always be true if "
     "the protobuf is written by the code, but should not be if the protobuf "
     "is hand-crafted by the user."];
  fixed64 u                             = 4
    [(CFO).desc = "NR3 core u variable."];
  fixed64 v                             = 5
    [(CFO).desc = "NR3 core u variable."];
  fixed64 w                             = 6
    [(CFO).desc = "NR3 core u variable."];
}

message NR3_SIMD_RNGCoreData
{
  fixed64 seed                          = 1
    [(CFO).desc = "RNG seed."];
  fixed64 calls                         = 2
    [(CFO).desc = "Number of calls to RNG to get to current state."];
  bool state_saved                      = 3
    [(CFO).desc = "True if RNG state is written. Will always be true if "
     "the protobuf is written by the code, but should not be if the protobuf "
     "is hand-crafted by the user."];
  repeated fixed64 vec_u                = 4
    [(CFO).desc = "NR3 core u variable."];
  repeated fixed64 vec_v                = 5
    [(CFO).desc = "NR3 core u variable."];
  repeated fixed64 vec_w                = 6
    [(CFO).desc = "NR3 core u variable."];
  repeated fixed64 dev                  = 7
    [(CFO).desc = "Saved deviates."];
  repeated fixed64 vec_stream_seed      = 8
    [(CFO).desc = "RNG seeds for each of the streams."];
}

message RNGCoreData
{
  oneof core
  {
    Ranlux48RNGCoreData ranlux48_core   = 1
      [(CFO).desc = "Ranlux48 core state data."];
    STLRNGCoreData mt19937_core         = 2
      [(CFO).desc = "MT19937 core state data."];
    NR3RNGCoreData nr3_core             = 3
      [(CFO).desc = "NR3 core state data."];
    NR3_SIMD_RNGCoreData nr3_simd_emu4_core  = 4
      [(CFO).desc = "NR3 SIMD emulation 256bit core state data."];
    NR3_SIMD_RNGCoreData nr3_avx2_core  = 5
      [(CFO).desc = "NR3 AVX2 core state data."];
  }
}

message VCLRNGCoreData
{
  uint32 vcl_architecture               = 1
    [(CFO).desc = "Size of VCL vectors supplied by this RNG: 128, 256 or 512."];
  oneof core
  {
    NR3_SIMD_RNGCoreData nr3_vcl_core   = 2
      [(CFO).desc = "NR3 vcl core state data."];
  }
}

message RNGData
{
  RNGCoreData core                      = 1
    [(CFO).desc = "Core state data"];
  bool bm_hascached                     = 10
    [(CFO).desc = "Flag for Box-Muller cached value available."];
  double bm_cachedval                   = 11
    [(CFO).desc = "Box-Muller cached value."];
}

message ExternalRNGData
{
  fixed64 seed                          = 1
    [(CFO).desc = "RNG seed."];
  string rng_type                       = 2
    [(CFO).desc = "RNG type."];
  bytes rng_data                        = 3
    [(CFO).desc = "RNG data."];
}
