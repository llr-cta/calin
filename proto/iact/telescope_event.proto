//-*-mode:protobuf; mode:font-lock;-*-

/* 

   calin/proto/telescope_event.proto -- Stephen Fegan -- 2015-12-19

   Protobufs for defining single-telescope event

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"
   
   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.
    
   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "common_types.proto";

package calin.ix.iact.telescope_event;

message ClockTime {
  uint32 clock_id                       = 1 [
      (CFO).desc = "Clock ID" ];
  common_types.Time clock_time          = 2 [
      (CFO).desc = "Time according to the clock.",
      (CFO).inline = true];
};

message IntegratedCharges {
  repeated uint32 channel_id            = 1 [
      (CFO).desc = "IDs for channels with a charge present. If all channels in "
      "the camera are present then this can be empty." ];
  repeated fixed32 charge               = 2 [
      (CFO).desc = "Integrated charges.",
      (CFO).units = "dc"];
  repeated fixed32 peak_sample          = 3 [
      (CFO).desc = "Time of peak signal within readout window in samples.",
      (CFO).units = "samples"];
  repeated fixed32 time_over_threshold  = 4 [
      (CFO).desc = "Time over threshold in samples.",
      (CFO).units = "samples"];
};

message OneChannelWaveform {
  repeated uint32 waveform              = 1 [
      (CFO).desc = "Waveform for one channel.",
      (CFO).units = "dc" ];
};

message Waveforms {
  repeated uint32 channel_id            = 1 [
      (CFO).desc = "IDs for channels with a waveform present. If all channels "
      "in the camera are present then this can be empty." ];
  repeated OneChannelWaveform waveform  = 2 [
      (CFO).desc = "Sampled waveforms.",
      (CFO).units = "dc" ];
};

enum TriggerType {
  SCIENCE, SOFTWARE, PERIODIC_PEDESTAL, EXTENAL_FLASHER, INTERNAL_FLASHER,
    FORCED_ARRAY };

message TelescopeEvent {
  int32 telescope_id                    = 1 [
      (CFO).desc = "Telescope ID." ];
  uint64 local_event_number             = 2 [
      (CFO).desc = "Local (camera) event number." ];
  TriggerType                           = 3 [
      (CFO).desc = "Trigger type." ];
  bool array_trigger_received           = 4 [
      (CFO).desc = "Flag for whether array trigger was received." ];
  uint64 array_event_number             = 5 [
      (CFO).desc = "Array event number or \"-1\" if not received." ];
  repeated ClockTime local_clock_time   = 6 [
      (CFO).desc = "Vector of local clock times associated with event." ];
  
};

