//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/telescope_layout.proto -- Stephen Fegan -- 2015-12-21

   Protobufs for telescope layout

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "common_types.proto";

package calin.ix.iact.instrument_layout;

message ChannelLayout {
  uint32 channel_index                  = 1 [
      (CFO).desc = "Sequential index of channel corresponding to this pixel "
      "in camera. This must be identical to index that this pixel has in the "
      "telescope channel array." ];
  int32 pixel_index                     = 2 [
      (CFO).desc = "Index of pixel that this channel corresponds to. A value "
      "of -1 means there is no (sky facing) pixel associated with this "
      "channel. It may, for example have an enginnering signal applied etc." ];
  int32 pixel_grid_index                = 3 [
      (CFO).desc = "Index of pixel withing hexagonal or square grid if the "
      "camera follows a grid, -1 otherwise." ];
  int32 channel_set_index               = 4 [
      (CFO).desc = "Index of the channel-set that this channel belongs to. "
      "This is generally used in a graded camera, which has multiple "
      "sets different pixel types. It can also denote which of the different "
      "engineering signals is connected to the channel." ];
  int32 module_index                    = 5 [
      (CFO).desc = "Index of the module that this channel belongs to, if "
      "appropriate; -1 otherwise." ];
  int32 module_channel_index            = 6 [
      (CFO).desc = "Index of the channel within the module that it belongs to, "
      "if appropriate; -1 otherwise." ];

  double x                              = 10 [
      (CFO).desc = "X-position of pixel center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
      (CFO).units = "cm" ];
  double y                              = 11 [
      (CFO).desc = "Y-position of pixel center in camera. Looking at the "
      "camera from the center of the reflector, with the camera at zero "
      "elevation, the X-axis corresponds to the horizontal plane, with "
      "positive X is to the right, and the Y-axis is the vertical plane, with "
      "positive Y up. If this channel is not connected to a real pixel "
      "then the value should be Nan.",
      (CFO).units = "cm" ];
  double diameter                       = 12 [
      (CFO).desc = "Diameter of circle that would fit in pixel without "
      "overlapping any other pixels.",
      (CFO).units = "cm" ];
  double geometric_area                 = 13 [
      (CFO).desc = "Geometric area of pixel.",
      (CFO).units = "cm^2" ];

  repeated uint32 neighbour_channel_indexes = 20 [
      (CFO).desc = "Indexes of the channels for all neigbouring pixels. "
      "This forms a commutative relationship between the two channels." ];
};

message CameraLayout {
  enum CameraType {
    NO_CAMERA                           = 0;
    NECTARCAM_19MODULE_TESTBENCH        = 1000;
  };

  enum PixelGridLayout {
    NO_GRID                             = 0;
    HEX_GRID                            = 1;
    SQUARE_GRID                         = 2;
  };

  CameraType camera_type                = 1 [
      (CFO).desc = "Camera type." ];
  uint32 camera_number                  = 2 [
      (CFO).desc = "Number of camera within series" ];

  repeated ChannelLayout channels       = 10 [
      (CFO).desc = "Channels in the telescope, arranged in the same order as "
      "they appear in the data." ];
  PixelGridLayout pixel_grid_layout     = 11 [
      (CFO).desc = "Layout of pixels on the grid, if appropriate." ];
  double pixel_grid_spacing             = 12 [
      (CFO).desc = "Linear distance between pixels on the grid.",
      (CFO).units = "cm" ];
  double pixel_grid_rotation            = 13 [
      (CFO).desc = "Rotation angle to align grid with pixels. This defines "
      "a rotation matrix R_mat, such that the position of the pixels on the "
      "camera, y_vec, can be calculated from the grid sites, x_vec, as "
      "y_vec = s * R_mat * x_vec + dy_vec, "
      "where s is the (scalar) grid spacing and dy_vec is the grid offset.",
      (CFO).units = "deg" ];
  double pixel_grid_offset_x            = 14 [
      (CFO).desc = "X-offset of pixels from the grid.",
      (CFO).units = "cm" ];
  double pixel_grid_offset_y            = 15 [
      (CFO).desc = "Y-offset of pixels from the grid.",
      (CFO).units = "cm" ];
};

message TelescopeLayout {
  enum TelescopeType {
    NO_TELESCOPE                        = 0;
    CTA_LST                             = 1;
    CTA_MST                             = 2;
    CTA_SCT                             = 3;
  };

  TelescopeType telescope_type          = 1 [
      (CFO).desc = "Telescope type." ];
  uint32 telescope_index                = 2 [
      (CFO).desc = "Index of telescope in array." ];

  common_types.Vector3D position        = 10 [
      (CFO).desc = "Position of the telescope relative to the center of the "
      "array. The axes are +X, East, +Y, North, +Z, up.",
      (CFO).units = "cm" ];
  double effective_focal_length         = 11 [
      (CFO).desc = "Effective focal length of the telescope, for converting "
      "linear dimensions on the camera plane to angles.",
      (CFO).units = "cm" ];

  CameraLayout camera                  = 100 [
    (CFO).desc = "Camera layout." ];
};

message ArrayLayout {
  enum ArrayType {
    NO_ARRAY                           = 0;
    CTA_NORTH                          = 1;
    CTA_SOUTH                          = 2;
  };

  ArrayType array_type                 = 1 [
    (CFO).desc = "Array type." ];

  calin.ix.common_types.EarthCoordinates array_origin = 10 [
    (CFO).desc = "Position of array on the Earth." ];

  repeated TelescopeLayout telescopes  = 100 [
    (CFO).desc = "Telescope layouts." ];
}
