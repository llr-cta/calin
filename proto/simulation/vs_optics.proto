//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/simulations/vs_optics.proto -- Stephen Fegan -- 2015-10-19

   Protobufs for defining VSO optics arrays

   Copyright 2015, Stephen Fegan <sfegan@llr.in2p3.fr>
   Laboratoire Leprince-Ringuet, CNRS/IN2P3, Ecole Polytechnique, Institut Polytechnique de Paris

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "common_types.proto";

package calin.ix.simulation.vs_optics;

// ============================================================================
//
// PARAMETERS THAT DEFINE CONCRETE ARRAY
//
// ============================================================================

message VSOMirrorData {
  uint32 id                                                = 1
    [(CFO).desc = "Sequential facet identification number, starting at zero."];
  uint32 hex_id                                            = 2
    [(CFO).desc = "Hexagonal grid identification number, starting at zero."];
  bool removed                                             = 3
    [(CFO).desc = "True if this mirror facet has been removed."];
  common_types.Vector3D pos                                = 4
    [(CFO).desc = "Position of facet center in the reflector frame. ",
     (CFO).units = "cm" ];
  common_types.Vector3D align                              = 5
    [(CFO).desc = "Facet normal at center of facet in the reflector frame. " ];
  double focal_length                                      = 6
    [(CFO).desc = "Focal length of the facet.", (CFO).units = "cm" ];
  double spot_size                                         = 7
    [(CFO).desc = "Diameter of the spot size on the focal plane that an on-axis "
     "\"laser beam\" would have.", (CFO).units = "cm"];
  double degrading_factor                                  = 8
    [(CFO).desc = "Wavelength-independent degrading factor to apply at "
     "reflection"];
};

message VSOPixelData {
  uint32 id                                                = 1
    [(CFO).desc = "Sequential pixel identification number, starting at zero."];
  uint32 hex_id                                            = 2
    [(CFO).desc = "Hexagonal grid identification number, starting at zero."];
  bool removed                                             = 3
    [(CFO).desc = "True if this pixel has been removed."];
  common_types.Vector3D pos                                = 4
    [(CFO).desc = "Position of the pixel center in the camera frame. ",
     (CFO).units = "cm" ];
};

message VSODiskObscurationData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the disk in reflector frame. ",
     (CFO).units = "cm" ];
  common_types.Vector3D normal                             = 2
    [(CFO).desc = "Normal to the disk in reflector frame. ",
     (CFO).units = "normalized" ];
  double diameter                                          = 3
    [(CFO).desc = "Diameter of the disk",
     (CFO).units = "cm"];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOTubeObscurationData {
  common_types.Vector3D end1_pos                           = 1
    [(CFO).desc = "Position of center of tube at 1st end in reflector frame.",
     (CFO).units = "cm" ];
  common_types.Vector3D end2_pos                           = 2
    [(CFO).desc = "Position of center of tube at 2nd end in reflector frame.",
     (CFO).units = "cm" ];
  double diameter                                          = 3
    [(CFO).desc = "Cross-sectional diameter of the tube",
     (CFO).units = "cm"];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOAlignedOctBoxObscurationData {
  common_types.Vector3D center                             = 1
    [(CFO).desc = "Center of the octoganal box.",
     (CFO).units = "cm" ];
  double flat_to_flat_width                                = 2
    [(CFO).desc = "Flat-to-flat width of the box in the X-Z plane.",
     (CFO).units = "cm" ];
  double height                                            = 3
    [(CFO).desc = "Height of the box in the Y direction.",
     (CFO).units = "cm" ];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOAlignedBoxObscurationData {
  common_types.Vector3D max_corner                         = 1
    [(CFO).desc = "Corner of box with max values of x,y,z.",
     (CFO).units = "cm" ];
  common_types.Vector3D min_corner                         = 2
    [(CFO).desc = "Corner of box with min values of x,y,z.",
     (CFO).units = "cm" ];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOAlignedRectangularApertureData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the square in reflector frame. ",
     (CFO).units = "cm" ];
  double flat_to_flat_x                                    = 2
    [(CFO).desc = "Width of the rectangle in X",
     (CFO).units = "cm"];
  double flat_to_flat_z                                    = 3
    [(CFO).desc = "Height of the rectangle in Z",
     (CFO).units = "cm"];
  bool invert                                              = 4
    [(CFO).desc = "If true then invert the obscuration, blocking rays that "
      "collide with the rectangle rather than those outside." ];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOAlignedTileApertureData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the square in reflector frame. ",
     (CFO).units = "cm" ];
  double pitch_x                                           = 2
    [(CFO).desc = "Tile pitch in X",
     (CFO).units = "cm"];
  double pitch_z                                           = 3
    [(CFO).desc = "Tile pitch in Z",
     (CFO).units = "cm"];
  double center_x                                          = 4
    [(CFO).desc = "Center of tile opening in X",
     (CFO).units = "cm"];
  double center_z                                          = 5
    [(CFO).desc = "Center of tile opening in Z",
     (CFO).units = "cm"];
  double support_width_x                                   = 6
    [(CFO).desc = "Center of tile opening in X",
     (CFO).units = "cm"];
  double support_width_z                                   = 7
    [(CFO).desc = "Center of tile opening in Z",
     (CFO).units = "cm"];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOAlignedHexagonalApertureData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the hexagon in reflector frame. ",
     (CFO).units = "cm" ];
  double flat_to_flat                                      = 2
    [(CFO).desc = "Flat to flat width of the hexagon",
     (CFO).units = "cm"];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
}

message VSOAlignedCircularApertureData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the disk in reflector frame. ",
     (CFO).units = "cm" ];
  double diameter                                          = 2
    [(CFO).desc = "Diameter of the disk",
     (CFO).units = "cm"];
  bool invert                                              = 3
   [(CFO).desc = "If true then invert the obscuration, blocking rays that "
     "collide with the circle rather than those outside." ];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
}

message VSOAlignedAnnulusData {
  common_types.Vector3D center_pos                         = 1
    [(CFO).desc = "Position of the center of the annulus in reflector frame. ",
     (CFO).units = "cm" ];
  double outer_diameter                                    = 2
    [(CFO).desc = "Outer diameter of the annulus.",
     (CFO).units = "cm"];
  double inner_diameter                                    = 3
    [(CFO).desc = "Inner diameter of the annulus",
     (CFO).units = "cm"];
  string identification                                    = 100 [
   (CFO).desc = "Identifying name of obscuration, for convenience." ];
}

message VSOBoxCollectionObscurationData {
  repeated VSOTubeObscurationData tube_obscuration          = 1
    [(CFO).desc = "Tube obscurations that are in this box." ];
  string identification                                    = 100 [
    (CFO).desc = "Identifying name of obscuration, for convenience." ];
};

message VSOObscurationData {
  oneof type {
    VSODiskObscurationData disk                            = 1;
    VSOTubeObscurationData tube                            = 2;
    VSOAlignedBoxObscurationData aligned_box               = 3;
    VSOAlignedRectangularApertureData rectangular_aperture = 4;
    VSOAlignedCircularApertureData circular_aperture       = 5;
    VSOAlignedHexagonalApertureData hexagonal_aperture     = 6;
    VSOAlignedTileApertureData tile_aperture               = 7;
    VSOBoxCollectionObscurationData box_collection         = 8;
    VSOAlignedOctBoxObscurationData octagonal_box          = 9;
    VSOAlignedAnnulusData annulus                          = 10;
  }
};


message VSOTelescopeData {
  uint32 id                                                = 1
    [(CFO).desc = "Sequential telescope identification number, starting "
     "at zero."];
  common_types.Vector3D pos                                = 3
    [(CFO).desc = "Position of the reflector center in the array frame. ",
     (CFO).units = "cm" ];
  double fp_offset                                           = 4
    [(CFO).desc = "Pointing offset perperndicular to elevation, allowing "
     "focal plane to be offset from nominal position in \"X\" direction. "
     "This offset cannot generally be done on an alt-az telescope but it "
     "can be useful in simulations.",
     (CFO).units = "deg"];
  double alpha_x                                           = 5
    [(CFO).desc = "Deviation of normal to the azimuth plane (the z-axis in "
     "the azimuth frame) the from vertical. Specifies a rotation of azimuth "
     "frame around the x-axis of the global frame. A positive value rotates "
     "the normal to the azimuth plane to the North. This rotation is applied "
     "AFTER alpha_y.",
     (CFO).units = "deg"];
  double alpha_y                                           = 6
    [(CFO).desc = "Deviation of normal to the azimuth plane (the z-axis in "
     "the azimuth frame) the from vertical. Specifies a rotation of azimuth "
     "frame around the y-axis of the global frame. A positive value rotates "
     "the normal to the azimuth plane to the East. This rotation is applied "
     "BEFORE alpha_x.",
     (CFO).units = "deg"];
  common_types.HorizontalCoordinates alt_az                = 7
    [(CFO).desc = "Altitude and elevation of telescope. " ];
  common_types.Vector3D translation                        = 8
    [(CFO).desc = "Vector from the origin of the reflector "
     "reference frame to the intersection of rotation axes. The reflector "
     "frame is defined by +y pointing along optical axis and +x pointing "
     "along the horizontal to the right when looking along the optic axis "
     "(when alpha_y=0). For example, with the optic axis (+y) pointing North, "
     "+x points East and +z point up. ",
     (CFO).units = "cm" ];
  double curvature_radius                                  = 9
    [(CFO).desc = "Radius of curvature of the reflector",
     (CFO).units = "cm"];
  double aperture                                          = 10
    [(CFO).desc = "Telescope aperture (diameter of reflector)",
     (CFO).units = "cm"];
  double facet_spacing                                     = 11
    [(CFO).desc = "Facet spacing, center-to-center distance between mirror "
     "sites of reflector. The X and Z coordinates of the facets are on a "
     "regular hexagonal grid, the Y coordinate put the facet onto a sphere "
     "or radius \"curvature_radius\".",
     (CFO).units = "cm"];
  double facet_size                                        = 12
    [(CFO).desc = "Edge-to-edge size of a single mirror facet of the "
     "reflector. It does not make sense to have facet_size > facet_spacing.",
     (CFO).units = "cm"];
  double optic_axis_rotation                               = 13
    [(CFO).desc = "Reflector rotation about the optical axis",
     (CFO).units = "deg"];
  double facet_grid_shift_x                                = 14
    [(CFO).desc = "Refector grid shift with respect to optic axis in x.",
     (CFO).units = "cm"];
  double facet_grid_shift_z                                = 15
    [(CFO).desc = "Refector grid shift with respect to optic axis in z.",
     (CFO).units = "cm"];
  uint32 hexagon_rings_n                                   = 16
    [(CFO).desc = "Number of hexagaonal rings of mirror facets." ];
  double reflector_ip                                      = 17
    [(CFO).desc = "Diameter of minimum sphere embedding reflector.",
     (CFO).units = "cm"];
 common_types.Vector3D reflector_ip_center                 = 18
   [(CFO).desc = "Center of minimum sphere embedding reflector in reflector r.f.",
    (CFO).units = "cm"];
  bool facet_labeling_parity                               = 19
    [(CFO).desc = "Mirrors are counted (on the hex. grid) in the direction of "
     "the +x-axis (east) when this flag is FALSE, and in the direction of the "
     "-x-axis (west) when this flag is TRUE (in the reflector r.f. -- home "
     "position of telescope."];
  common_types.Vector3D fp_translation                     = 20
    [(CFO).desc = "Vector from the origin of the reflector "
     "reference frame to the origin of the camera frame. ",
     (CFO).units = "cm" ];
  double camera_diameter                                   = 21
    [(CFO).desc = "Diameter of camera.",
     (CFO).units = "cm"];
  double field_of_view                                     = 22
    [(CFO).desc = "Diameter of field of view.",
     (CFO).units = "deg"];
  double cathode_diameter                                  = 23
    [(CFO).desc = "Diameter of cathode of the PMT.",
     (CFO).units = "cm"];
  double pixel_spacing                                     = 24
    [(CFO).desc = "Spacing between pixels on the focal plane.",
     (CFO).units = "cm"];
  double pixel_rotation                                    = 25
    [(CFO).desc = "Pixel rotation about the normal to the focal plane.",
     (CFO).units = "deg"];
  double pixel_grid_shift_x                                = 26
   [(CFO).desc = "Pixel grid shift with respect to optic axis in x.",
    (CFO).units = "cm"];
  double pixel_grid_shift_z                                = 27
   [(CFO).desc = "Pixel grid shift with respect to optic axis in z.",
    (CFO).units = "cm"];
  double conc_survival_prob                                = 28
    [(CFO).desc = "Survival probability for photons hitting concentrator." ];
  common_types.Vector3D fp_rotation                        = 29
    [(CFO).desc = "Camera rotation vector with respect to reflector frame. ",
     (CFO).units = "deg" ];
  double camera_ip                                         = 30
    [(CFO).desc = "Diameter of sphere embedding camera.",
     (CFO).units = "cm"];
  bool pixel_labeling_parity                               = 31
    [(CFO).desc = "Pixels are counted (on the hex. grid) in the direction of "
     "the +x-axis when this flag is FALSE, and in the direction of the "
     "-x-axis when this flag is TRUE (in the camera r.f.)."];

  double window_front                                      = 40
    [(CFO).desc = "Position of outer window surface along y-axis window in "
      "reflector frame.",
    (CFO).units = "cm"];
  double window_outer_radius                               = 41
    [(CFO).desc = "Radius of outer window sphere, must be positive or zero. If "
      "zero then the window is planar.",
     (CFO).units = "cm"];
  double window_thickness                                  = 42
    [(CFO).desc = "Thickness of window, i.e. difference between radii of "
       "outer and inner window spheres. If zero then there is no window.",
     (CFO).units = "cm"];
  double window_refractive_index                           = 43
    [(CFO).desc = "Refractive index of window material." ];

  repeated VSOObscurationData pre_reflection_obscuration   = 100
    [(CFO).desc = "Obscurations before reflection at mirror, in the reflector frame."];
  repeated VSOObscurationData post_reflection_obscuration  = 101
    [(CFO).desc = "Obscurations after reflection at mirror, in the reflector frame."];
  repeated VSOObscurationData camera_obscuration           = 102
    [(CFO).desc = "Obscurations after reflection at mirror, in the camera frame."];
  repeated VSOMirrorData mirror                            = 200
    [(CFO).desc = "Mirror facets on the telescope."];
  repeated VSOPixelData pixel                              = 300
    [(CFO).desc = "Pixels in the camera of the telescope."];
};

message VSOArrayData
{
  common_types.EarthCoordinates array_origin               = 1
    [(CFO).desc = "Coordinates of origin of array reference frame on Earth."];
  repeated VSOTelescopeData telescope                      = 2
    [(CFO).desc = "Telescopes in array."];
};

// ============================================================================
//
// PARAMETERS USED TO CONSTRUCT RANDOM ARRAY
//
// ============================================================================

message HexArrayLayout
{
  uint32 num_scope_rings                                   = 1
    [(CFO).desc = "Number of hexagonal rings of telescopes in the array. A "
     "value of 0 gives an array with one telescope; 1 gives an array with "
     "seven telescopes, etc."];
  double scope_spacing                                     = 2
    [(CFO).desc = "Spacing between telescopes in an array. From this parameter "
     "positions of telescopes are calculated on the hexagonal grid. Position "
     "of telescope is defined as point of intersection of its rotation axes.",
     (CFO).units = "cm"];
  bool scope_labeling_parity                               = 3
    [(CFO).desc = "Telescopes are counted on a hexagonal grid in the direction "
     "of the +x-axis when this flag is FALSE, and in the direction of the "
     "-x-axis when it is TRUE"];
  repeated uint32 scope_missing_list                       = 4
    [(CFO).desc = "List of the Hex IDs of the scopes missing from the array."];
  double scope_position_dispersion_xy                      = 5
    [(CFO).desc = "Dispersion in the positioning of telescopes in each of the "
     "horizontal directions (x and y)",
     (CFO).units = "cm"];
  double scope_position_dispersion_z                       = 6
    [(CFO).desc = "Dispersion in the positioning of telescopes in the "
     "vertical direction (z)",
     (CFO).units = "cm"];
};

message UserDefinedArrayLayout
{
  repeated common_types.Vector3D scope_positions           = 1
    [(CFO).desc = "Telescope positions within the array. "
     "X : East-West coordinate of scope in array frame, positive "
     "values are East of the origin, negative values are West. "
     "Y : North-South coordinate of scope in array frame, positive "
     "values are North of the origin, negative values are South. "
     "Z : Up-Down coordinate of scope in array frame, positive "
     "values are above the origin, negative values are below.",
     (CFO).units = "cm"];
};

message ReflectorFrameParameters
{
  common_types.HorizontalCoordinates altaz                 = 1
    [(CFO).desc = "Altitude and elevation of telescope"];
  double fp_offset                                           = 2
    [(CFO).desc = "Deviation from perpendicularity of elevation and azimuth "
     "planes. Specifies rotation of the elevation axis around the y-axis of "
     "the azimuth plane.",
     (CFO).units = "deg"];
  double alpha_x                                           = 3
    [(CFO).desc = "Deviation of normal to the azimuth plane (the z-axis in "
     "the azimuth frame) the from vertical. Specifies a rotation of azimuth "
     "frame around the x-axis of the global frame. A positive value rotates "
     "the normal to the azimuth plane to the North. This rotation is applied "
     "AFTER alpha_y.",
     (CFO).units = "deg"];
  double alpha_y                                           = 4
    [(CFO).desc = "Deviation of normal to the azimuth plane (the z-axis in "
     "the azimuth frame) the from vertical. Specifies a rotation of azimuth "
     "frame around the y-axis of the global frame. A positive value rotates the "
     "normal to the azimuth plane to the East. This rotation is applied "
     "BEFORE alpha_x.",
     (CFO).units = "deg"];
  common_types.Vector3D translation                        = 5
    [(CFO).desc = "Vector from the origin of the reflector "
     "reference frame to the intersection of rotation axes. The reflector "
     "frame is defined by +y pointing along optical axis and +x pointing "
     "along the horizontal to the right when looking along the optic axis "
     "(when alpha_y=0). For example, with the optic axis (+y) pointing North, "
     "+x points East and +z point up.",
     (CFO).units = "cm" ];
  double optic_axis_rotation                               = 6
    [(CFO).desc = "Reflector grid rotation about the optical axis.",
     (CFO).units = "deg"];
};

message ConcurrentNormalsAlignment
{
  common_types.Vector3D alignment_pt                       = 1
    [(CFO).desc = "Coordinate of nominal alignment point in reflector "
     "reference frame. In a classic DC alignment mode this should be "
     "(0,2F,0). If the y-coordinate is zero, the alignment point is "
     "be calculated on the fly for each facet normal which allows the method "
     "be used in modified DC designs.",
     (CFO).units = "cm" ];
  double alignment_pt_dispersion_xz                        = 2
    [(CFO).desc = "Telescope-to-telescope dispersion of alignment point on "
     "each of the axes perpendicular to optic axis (the X and Z axes of the "
     "reflector frame). This parameter introduces a random systematic offset "
     "in the alignment of all facets on a given telescope.",
     (CFO).units = "cm"];
  double alignment_pt_dispersion_y                         = 3
    [(CFO).desc = "Telescope-to-telescope dispersion of alignment point "
     "parallel to the optic axis (Y axis in the reflector frame). This "
     "parameter introduces a random systematic offset in the alignment of "
     "all facets on a given telescope.",
     (CFO).units = "cm"];
};

message MinimumPSFAlignment
{
  double object_plane                                      = 1
    [(CFO).desc = "Alignment object plane. A value of zero or inf implies "
     "the telescope should be focussed for objects at infinity.",
     (CFO).units = "cm"];
  double image_pt_theta                                    = 2
    [(CFO).desc = "Focal plane alignment point from center of FoV.",
     (CFO).units = "deg"];
  double image_pt_phi                                      = 3
    [(CFO).desc = "Focal plane alignment point polar angle.",
     (CFO).units = "deg"];
};

message HexDCReflectorParameters
{
  double curvature_radius                                  = 1
    [(CFO).desc = "Radius of curvature of the reflector",
     (CFO).units = "cm"];
  double aperture                                          = 2
    [(CFO).desc = "Telescope aperture (diameter of reflector). This is the "
     "limit on the radial distance to the mirror facets from the center of the "
     " reflector, in the X-Y plane. If zero then the number of facets is "
     "determined only by \"facet_hex_rings\", otherwise both play a role.",
     (CFO).units = "cm"];
  oneof alignment
  {
    ConcurrentNormalsAlignment norm_align                  = 4
      [(CFO).desc = "Traditional DC alignment of facet normals to a common "
       "point."];
    MinimumPSFAlignment psf_align                          = 5
      [(CFO).desc = "Alignment to minimize PSF for source at prescribed "
       "distance."];
  };
  double alignment_image_plane                             = 6
    [(CFO).desc = "Alignment image plane to be used in MinimumPSFAlignment "
     "(or ConcurrentNormalsAlignment if alignment_pt_y=0). A value of zero "
     "implies the telescope should be focussed such that the image appears "
     "on the camera plane.",
     (CFO).units = "cm"];
  double facet_alignment_dispersion                        = 7
    [(CFO).desc = "Dispersion of facet image centroids on the image plane.",
     (CFO).units = "cm"];

  uint32 facet_num_hex_rings                               = 9
    [(CFO).desc = "Maximum number of hexagonal rings of mirrors. A value of "
     "zero implies that the number of mirrors is based only on the \"aperture\" "
     "variable. Otherwise both values play a role."];
  double facet_spacing                                     = 10
    [(CFO).desc = "Facet spacing, center-to-center distance between mirror "
     "sites of reflector. The X and Z coordinates of the facets are on a "
     "regular hexagonal grid, the Y coordinate put the facet onto a sphere "
     "or radius \"curvature_radius\".",
     (CFO).units = "cm"];
  double facet_size                                        = 11
    [(CFO).desc = "Edge-to-edge size of a single mirror facet of the "
     "reflector. It does not make sense to have facet_size > facet_spacing.",
     (CFO).units = "cm"];
  double facet_grid_shift_x                                = 12
    [(CFO).desc = "Reflector grid shift with respect to optic axis in x.",
     (CFO).units = "cm"];
  double facet_grid_shift_z                                = 13
    [(CFO).desc = "Reflector grid shift with respect to optic axis in z.",
     (CFO).units = "cm"];
  double facet_focal_length                                = 14
    [(CFO).desc = "Focal length of a mirror facet. A value of zero forces "
     "the focal length of each facet to be calculated from its position on "
     "the reflector with respect to the focal plane.",
     (CFO).units = "cm"];
  double facet_focal_length_dispersion                     = 15
    [(CFO).desc = "Dispersion of mirror facet focal length.",
     (CFO).units = "cm"];
  double facet_spot_size_probability                       = 16
    [(CFO).desc = "Mean fraction of photons contained by a circle with "
     "diameter given by the spotsize parameter below. This parameter "
     "essentially defines what the facet_spot_size and "
     "facet_spot_size_dispersion parameters mean. "
     "Some typical values are given here:\n"
    "0.39 -- Spotsize is DIAMETER of 1-sigma of distribution (2 x 1.00 sigma)\n"
    "0.50 -- Spotsize is FWHM                                (2 x 1.77 sigma)\n"
    "0.67 -- Spotsize DIAMETER contains 2/3 of the photons   (2 x 1.48 sigma)\n"
    "0.85 -- Spotsize DIAMETER contains 85% of the photons   (2 x 1.95 sigma)\n"
    "0.90 -- Spotsize DIAMETER contains 90% of the photons   (2 x 2.15 sigma)"];
  double facet_spot_size                                   = 17
    [(CFO).desc = "Mean spot size (diameter) at the focal distance of the "
     "mirror from an infinitely narrow parallel beam of light along the "
     "optical axis. This parameter defines the mean DIAMETER of a circle "
     "which contains facet_spot_size_probability of the photons on a screen "
     "at its focal length.",
     (CFO).units = "cm"];
  double facet_spot_size_dispersion                        = 18
    [(CFO).desc = "Facet-to-facet dispersion in facet_spot_size.",
     (CFO).units = "cm"];
  double facet_pos_tangent_dispersion                      = 19
    [(CFO).desc = "Facet-to-facet dispersion in positioning of the mirror "
     "facet on axis tangential to the the reflector sphere.",
     (CFO).units = "cm"];
  double facet_pos_normal_dispersion                       = 20
    [(CFO).desc = "Facet-to-facet dispersion in positioning of the mirror "
     "facet perpendicular to the reflector sphere.",
     (CFO).units = "cm"];
  bool facet_labeling_parity                               = 21
    [(CFO).desc = "Mirrors are counted (on the hex. grid) in the direction of "
     "the +x-axis (east) when this flag is FALSE, and in the direction of the "
     "-x-axis (west) when this flag is TRUE (in the reflector r.f. -- home "
     "position of telescope."];
  repeated uint32 facet_missing_list                       = 22
    [(CFO).desc = "List of the Hex IDs of the mirrors missing from each "
     "telescope. If none are missing this should be empty."];
  double weathering_factor                                 = 23
    [(CFO).desc = "Facet absorption factor applied to all photons. A value "
     "of 1.0 means no absorption"];
};

message SphericalWindowParameters {
  double front_y_coord                                     = 1
    [(CFO).desc = "Position of point on outer window surface along y-axis in "
      "reflector frame with normal along the negative y-axis.",
     (CFO).units = "cm"];
  double outer_radius                                      = 2
    [(CFO).desc = "Radius of outer window sphere, must be positive or zero. If "
      "zero or infinity then window is planar.",
     (CFO).units = "cm"];
  double thickness                                         = 3
   [(CFO).desc = "Thickness of window, i.e. difference between radii of "
      "outer and inner window spheres.",
    (CFO).units = "cm"];
  double refractive_index                                  = 4
    [(CFO).desc = "Refractive index of window material." ];
};

message FocalPlaneParameters {
  double camera_diameter                                   = 1
    [(CFO).desc = "Diameter of the camera in the focal plane.",
     (CFO).units = "cm"];
  common_types.Vector3D translation                        = 2
    [(CFO).desc = "Origin of focal plane reference frame in the reflector "
     "frame.",
     (CFO).units = "cm" ];
  common_types.Vector3D rotation                           = 3
    [(CFO).desc = "Ideally the focal plane is in the x-z plane in the "
     "reflector reflector frame. However it can be rotated with respect to "
     "reflector frame if desired. Focal plane rotation around x-axis of "
     "the reflector frame.",
     (CFO).units = "deg" ];
};

message HexPixelArrayParameters
{
  double spacing                                           = 1
    [(CFO).desc = "Spacing between centers of neighboring pixels on a "
     "hexagonal grid.",
     (CFO).units = "cm"];
  double dead_space                                        = 2
    [(CFO).desc = "Dead space around edges of hexagonal cell. The edge-to-edge "
     "diameter of the active portion of the lightcones at their entrance "
     "aperture is diameter_outer = spacing - 2*dead_space.",
     (CFO).units = "cm"];
  double cone_depth                                        = 3
    [(CFO).desc = "Depth of cone from entrance to exit aperture "
     "light cones.",
     (CFO).units = "cm"];
  double cone_inner_diameter                               = 4
    [(CFO).desc = "The edge-to-edge diameter of the active portion of the "
     "lightcones at their exit aperture.",
     (CFO).units = "cm"];
  double cone_survival_prob                                = 5
    [(CFO).desc = "Survival probability for photons hitting concentrator." ];
  double grid_rotation                                     = 6
    [(CFO).desc = "Rotation angle between pixels and nominal hexagonal grid.",
     (CFO).units = "deg"];
  bool pixel_labeling_parity                               = 7
    [(CFO).desc = "Pixels are counted on a hexagonal grid in the direction "
     "of the +x-axis when this flag is FALSE, and in the direction of the "
     "-x-axis when it is TRUE"];
  double pixel_grid_shift_x                                = 8
    [(CFO).desc = "Pixel grid shift with respect to optic axis in x.",
     (CFO).units = "cm"];
  double pixel_grid_shift_z                                = 9
    [(CFO).desc = "Pixel grid shift with respect to optic axis in z.",
     (CFO).units = "cm"];

  uint32 hex_module_size                                   = 10
    [(CFO).desc = "Number of hexagonal rings in each module. This is a "
     "convenience parameter that simplifies specifying the list of pixels "
     "in the camera."];
  uint32 module_num_hex_rings                              = 11
    [(CFO).desc = "Number of hexagonal rings of module in the camera. This can "
     "be left zero and the camera will be filled with modules up to "
     "\"camera_diameter\"."];
  repeated uint32 module_missing_list                      = 12
    [(CFO).desc = "List of the Hex IDs of the modules (or pixels if "
     "hex_module_size<=1) missing from each camera. If none are missing this "
     "should be empty."];
  bool hex_module_layout_use_b_configuration               = 13
    [(CFO).desc = "True if hex clustering algorithm should use \"b\" layout. "
      "There are two ways to configure hexagonal modules, this forces use of "
      "the second."];
};

message IsotropicDCArrayParameters {
  common_types.EarthCoordinates array_origin               = 1
    [(CFO).desc = "Coordinates of origin of array reference frame on Earth"];
  oneof array_layout {
    HexArrayLayout hex_array_layout                        = 2;
    UserDefinedArrayLayout prescribed_array_layout         = 3;
  };
  ReflectorFrameParameters reflector_frame                 = 4;
  HexDCReflectorParameters reflector                       = 5;
  repeated VSOObscurationData pre_reflection_obscuration   = 10;
  repeated VSOObscurationData post_reflection_obscuration  = 11;
  repeated VSOObscurationData camera_obscuration           = 12;
  FocalPlaneParameters focal_plane                         = 20;
  HexPixelArrayParameters pixel                            = 21;
  SphericalWindowParameters spherical_window               = 22;
};
