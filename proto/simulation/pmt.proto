//-*-mode:protobuf; mode:font-lock;-*-

/*

   calin/proto/simulations/pmt.proto -- Stephen Fegan -- 2016-03-21

   Protobufs for defining PMT simulations

   Copyright 2016, Stephen Fegan <sfegan@llr.in2p3.fr>
   LLR, Ecole polytechnique, CNRS/IN2P3, Universite Paris-Saclay

   This file is part of "calin"

   "calin" is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 or
   later, as published by the Free Software Foundation.

   "calin" is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

*/

syntax = "proto3";

import "calin.proto";
import "common_types.proto";
import "math/rng.proto";

package calin.ix.simulation.pmt;

message PMTSimStageConfig {
  double gain_mean                                         = 1 [
    (CFO).desc = "Gain of stage." ];
  double gain_rms_frac                                     = 2 [
    (CFO).desc = "Additional non-Poisson RMS of stage as fraction of mean." ];
  double prob_skip                                         = 3 [
    (CFO).desc = "Probability of skipping stage." ];
};

message PMTSimConfig {
  repeated PMTSimStageConfig stage                         = 1 [
    (CFO).desc = "Configuration values for all stages." ];
  bool suppress_zero                                       = 2 [
    (CFO).desc = "Suppress events with zero charge." ];
  bool signal_in_pe                                        = 3 [
    (CFO).desc = "Rescale output into PE by dividing by mean gain." ];
  ix.math.rng.RNGData rng_config                           = 10 [
    (CFO).desc = "RNG configuration." ];
};

message PMTSimAbbreviatedConfig {
  uint32 num_stage                                         = 1 [
    (CFO).desc = "Number of gain stages (dynodes)." ];
  double total_gain                                        = 2 [
    (CFO).desc = "Total gain of the PMT, including zero-charge events." ];
  double stage_0_gain                                      = 3 [
    (CFO).desc = "Mean gain of first stage." ];
  double stage_0_gain_rms_frac                             = 4 [
    (CFO).desc = "Additional non-Poisson RMS of first stage as "
      "fraction of mean." ];
  double stage_0_prob_skip                                 = 5 [
    (CFO).desc = "Probability of skipping first stage." ];
  double stage_n_gain_rms_frac                             = 6 [
    (CFO).desc = "Additional non-Poisson RMS of latter stages (n>0) as "
      "fraction of mean." ];
  double stage_n_prob_skip                                 = 7 [
    (CFO).desc = "Probability of skipping latter stages (n>0)." ];
  bool suppress_zero                                       = 8 [
    (CFO).desc = "Suppress events with zero charge." ];
  bool signal_in_pe                                        = 9 [
    (CFO).desc = "Rescale output into PE by dividing by mean gain." ];
};

message PMTSimPMF  {
  repeated double pn                                       = 1 [
    (CFO).desc = "Probability mass function in electrons." ];
  bool suppress_zero                                       = 2 [
    (CFO).desc = "Suppress events with zero charge." ];
  bool signal_in_pe                                        = 3 [
    (CFO).desc = "Rescale output into PE by dividing by mean gain." ];
};
