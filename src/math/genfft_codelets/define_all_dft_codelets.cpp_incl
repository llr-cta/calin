// Automatically generated file

// ********************************* N = 8 *********************************

#include "dft_r2cf_8.c"
#include "dft_r2cb_8.c"
#include "dft_c2c_8.c"

template<> void dft_r2c<8>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[8*cs+1] = ZERO();
  dft_codelet_r2cf_8(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<8>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_8(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<8>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_8(r_in, r_in+rs, c_out, c_out+8*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<8>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_8(r_out, r_out+rs, c_in, c_in+8*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 12 *********************************

#include "dft_r2cf_12.c"
#include "dft_r2cb_12.c"
#include "dft_c2c_12.c"

template<> void dft_r2c<12>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[12*cs+1] = ZERO();
  dft_codelet_r2cf_12(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<12>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_12(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<12>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_12(r_in, r_in+rs, c_out, c_out+12*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<12>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_12(r_out, r_out+rs, c_in, c_in+12*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 15 *********************************

#include "dft_r2cf_15.c"
#include "dft_r2cb_15.c"
#include "dft_c2c_15.c"

template<> void dft_r2c<15>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  // c_out[14*cs+1] = ZERO();
  dft_codelet_r2cf_15(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<15>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_15(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<15>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_15(r_in, r_in+rs, c_out, c_out+15*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<15>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_15(r_out, r_out+rs, c_in, c_in+15*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 16 *********************************

#include "dft_r2cf_16.c"
#include "dft_r2cb_16.c"
#include "dft_c2c_16.c"

template<> void dft_r2c<16>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[16*cs+1] = ZERO();
  dft_codelet_r2cf_16(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<16>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_16(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<16>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_16(r_in, r_in+rs, c_out, c_out+16*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<16>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_16(r_out, r_out+rs, c_in, c_in+16*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 18 *********************************

#include "dft_r2cf_18.c"
#include "dft_r2cb_18.c"
#include "dft_c2c_18.c"

template<> void dft_r2c<18>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[18*cs+1] = ZERO();
  dft_codelet_r2cf_18(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<18>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_18(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<18>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_18(r_in, r_in+rs, c_out, c_out+18*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<18>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_18(r_out, r_out+rs, c_in, c_in+18*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 20 *********************************

#include "dft_r2cf_20.c"
#include "dft_r2cb_20.c"
#include "dft_c2c_20.c"

template<> void dft_r2c<20>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[20*cs+1] = ZERO();
  dft_codelet_r2cf_20(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<20>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_20(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<20>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_20(r_in, r_in+rs, c_out, c_out+20*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<20>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_20(r_out, r_out+rs, c_in, c_in+20*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 24 *********************************

#include "dft_r2cf_24.c"
#include "dft_r2cb_24.c"
#include "dft_c2c_24.c"

template<> void dft_r2c<24>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[24*cs+1] = ZERO();
  dft_codelet_r2cf_24(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<24>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_24(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<24>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_24(r_in, r_in+rs, c_out, c_out+24*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<24>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_24(r_out, r_out+rs, c_in, c_in+24*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 30 *********************************

#include "dft_r2cf_30.c"
#include "dft_r2cb_30.c"
#include "dft_c2c_30.c"

template<> void dft_r2c<30>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[30*cs+1] = ZERO();
  dft_codelet_r2cf_30(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<30>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_30(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<30>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_30(r_in, r_in+rs, c_out, c_out+30*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<30>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_30(r_out, r_out+rs, c_in, c_in+30*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 32 *********************************

#include "dft_r2cf_32.c"
#include "dft_r2cb_32.c"
#include "dft_c2c_32.c"

template<> void dft_r2c<32>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[32*cs+1] = ZERO();
  dft_codelet_r2cf_32(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<32>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_32(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<32>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_32(r_in, r_in+rs, c_out, c_out+32*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<32>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_32(r_out, r_out+rs, c_in, c_in+32*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 36 *********************************

#include "dft_r2cf_36.c"
#include "dft_r2cb_36.c"
#include "dft_c2c_36.c"

template<> void dft_r2c<36>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[36*cs+1] = ZERO();
  dft_codelet_r2cf_36(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<36>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_36(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<36>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_36(r_in, r_in+rs, c_out, c_out+36*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<36>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_36(r_out, r_out+rs, c_in, c_in+36*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 40 *********************************

#include "dft_r2cf_40.c"
#include "dft_r2cb_40.c"
#include "dft_c2c_40.c"

template<> void dft_r2c<40>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[40*cs+1] = ZERO();
  dft_codelet_r2cf_40(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<40>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_40(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<40>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_40(r_in, r_in+rs, c_out, c_out+40*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<40>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_40(r_out, r_out+rs, c_in, c_in+40*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 48 *********************************

#include "dft_r2cf_48.c"
#include "dft_r2cb_48.c"
#include "dft_c2c_48.c"

template<> void dft_r2c<48>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[48*cs+1] = ZERO();
  dft_codelet_r2cf_48(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<48>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_48(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<48>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_48(r_in, r_in+rs, c_out, c_out+48*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<48>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_48(r_out, r_out+rs, c_in, c_in+48*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 56 *********************************

#include "dft_r2cf_56.c"
#include "dft_r2cb_56.c"
#include "dft_c2c_56.c"

template<> void dft_r2c<56>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[56*cs+1] = ZERO();
  dft_codelet_r2cf_56(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<56>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_56(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<56>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_56(r_in, r_in+rs, c_out, c_out+56*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<56>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_56(r_out, r_out+rs, c_in, c_in+56*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 60 *********************************

#include "dft_r2cf_60.c"
#include "dft_r2cb_60.c"
#include "dft_c2c_60.c"

template<> void dft_r2c<60>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[60*cs+1] = ZERO();
  dft_codelet_r2cf_60(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<60>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_60(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<60>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_60(r_in, r_in+rs, c_out, c_out+60*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<60>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_60(r_out, r_out+rs, c_in, c_in+60*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ********************************* N = 64 *********************************

#include "dft_r2cf_64.c"
#include "dft_r2cb_64.c"
#include "dft_c2c_64.c"

template<> void dft_r2c<64>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  c_out[1] = ZERO();
  c_out[64*cs+1] = ZERO();
  dft_codelet_r2cf_64(r_in, r_in+rs, c_out, c_out+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_c2r<64>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_64(r_out, r_out+rs, c_in, c_in+1, 2*rs, 2*cs, 2*cs, 1, 0, 0);
}

template<> void dft_r2hc<64>(float_type* r_in, float_type* c_out, int rs, int cs)
{
  dft_codelet_r2cf_64(r_in, r_in+rs, c_out, c_out+64*cs, 2*rs, cs, -cs, 1, 0, 0);
}

template<> void dft_hc2r<64>(float_type* r_out, float_type* c_in, int rs, int cs)
{
  dft_codelet_r2cb_64(r_out, r_out+rs, c_in, c_in+64*cs, 2*rs, cs, -cs, 1, 0, 0);
}


// ******************************** Dispatcher ********************************

void dft_r2c(int N, R* r_in, R* c_out, int rs, int cs)
{
  switch(N) {
  case 8: return dft_r2c<8>(r_in, c_out, rs, cs);
  case 12: return dft_r2c<12>(r_in, c_out, rs, cs);
  case 15: return dft_r2c<15>(r_in, c_out, rs, cs);
  case 16: return dft_r2c<16>(r_in, c_out, rs, cs);
  case 18: return dft_r2c<18>(r_in, c_out, rs, cs);
  case 20: return dft_r2c<20>(r_in, c_out, rs, cs);
  case 24: return dft_r2c<24>(r_in, c_out, rs, cs);
  case 30: return dft_r2c<30>(r_in, c_out, rs, cs);
  case 32: return dft_r2c<32>(r_in, c_out, rs, cs);
  case 36: return dft_r2c<36>(r_in, c_out, rs, cs);
  case 40: return dft_r2c<40>(r_in, c_out, rs, cs);
  case 48: return dft_r2c<48>(r_in, c_out, rs, cs);
  case 56: return dft_r2c<56>(r_in, c_out, rs, cs);
  case 60: return dft_r2c<60>(r_in, c_out, rs, cs);
  case 64: return dft_r2c<64>(r_in, c_out, rs, cs);
  default: throw std::runtime_error("DFT codelet for size " + std::to_string(N) +
    " not available at compile time");
  }
}

void dft_c2r(int N, R* r_in, R* c_out, int rs, int cs)
{
  switch(N) {
  case 8: return dft_c2r<8>(r_in, c_out, rs, cs);
  case 12: return dft_c2r<12>(r_in, c_out, rs, cs);
  case 15: return dft_c2r<15>(r_in, c_out, rs, cs);
  case 16: return dft_c2r<16>(r_in, c_out, rs, cs);
  case 18: return dft_c2r<18>(r_in, c_out, rs, cs);
  case 20: return dft_c2r<20>(r_in, c_out, rs, cs);
  case 24: return dft_c2r<24>(r_in, c_out, rs, cs);
  case 30: return dft_c2r<30>(r_in, c_out, rs, cs);
  case 32: return dft_c2r<32>(r_in, c_out, rs, cs);
  case 36: return dft_c2r<36>(r_in, c_out, rs, cs);
  case 40: return dft_c2r<40>(r_in, c_out, rs, cs);
  case 48: return dft_c2r<48>(r_in, c_out, rs, cs);
  case 56: return dft_c2r<56>(r_in, c_out, rs, cs);
  case 60: return dft_c2r<60>(r_in, c_out, rs, cs);
  case 64: return dft_c2r<64>(r_in, c_out, rs, cs);
  default: throw std::runtime_error("DFT codelet for size " +
    std::to_string(N) + " not available at compile time");
  }
}

void dft_r2hc(int N, R* r_in, R* c_out, int rs, int cs)
{
  switch(N) {
  case 8: return dft_r2hc<8>(r_in, c_out, rs, cs);
  case 12: return dft_r2hc<12>(r_in, c_out, rs, cs);
  case 15: return dft_r2hc<15>(r_in, c_out, rs, cs);
  case 16: return dft_r2hc<16>(r_in, c_out, rs, cs);
  case 18: return dft_r2hc<18>(r_in, c_out, rs, cs);
  case 20: return dft_r2hc<20>(r_in, c_out, rs, cs);
  case 24: return dft_r2hc<24>(r_in, c_out, rs, cs);
  case 30: return dft_r2hc<30>(r_in, c_out, rs, cs);
  case 32: return dft_r2hc<32>(r_in, c_out, rs, cs);
  case 36: return dft_r2hc<36>(r_in, c_out, rs, cs);
  case 40: return dft_r2hc<40>(r_in, c_out, rs, cs);
  case 48: return dft_r2hc<48>(r_in, c_out, rs, cs);
  case 56: return dft_r2hc<56>(r_in, c_out, rs, cs);
  case 60: return dft_r2hc<60>(r_in, c_out, rs, cs);
  case 64: return dft_r2hc<64>(r_in, c_out, rs, cs);
  default: throw std::runtime_error("DFT codelet for size " +
    std::to_string(N) + " not available at compile time");
  }
}

void dft_hc2r(int N, R* r_in, R* c_out, int rs, int cs)
{
  switch(N) {
  case 8: return dft_hc2r<8>(r_in, c_out, rs, cs);
  case 12: return dft_hc2r<12>(r_in, c_out, rs, cs);
  case 15: return dft_hc2r<15>(r_in, c_out, rs, cs);
  case 16: return dft_hc2r<16>(r_in, c_out, rs, cs);
  case 18: return dft_hc2r<18>(r_in, c_out, rs, cs);
  case 20: return dft_hc2r<20>(r_in, c_out, rs, cs);
  case 24: return dft_hc2r<24>(r_in, c_out, rs, cs);
  case 30: return dft_hc2r<30>(r_in, c_out, rs, cs);
  case 32: return dft_hc2r<32>(r_in, c_out, rs, cs);
  case 36: return dft_hc2r<36>(r_in, c_out, rs, cs);
  case 40: return dft_hc2r<40>(r_in, c_out, rs, cs);
  case 48: return dft_hc2r<48>(r_in, c_out, rs, cs);
  case 56: return dft_hc2r<56>(r_in, c_out, rs, cs);
  case 60: return dft_hc2r<60>(r_in, c_out, rs, cs);
  case 64: return dft_hc2r<64>(r_in, c_out, rs, cs);
  default: throw std::runtime_error("DFT codelet for size " +
    std::to_string(N) + " not available at compile time");
  }
}
